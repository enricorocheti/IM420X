
Aula2_Ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d7c  08003d7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003df4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003df4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2a6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d14  00000000  00000000  0002c346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fad  00000000  00000000  0002f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a68e  00000000  00000000  00054365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e818f  00000000  00000000  0005e9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146b82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f90  00000000  00000000  00146bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003c74 	.word	0x08003c74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003c74 	.word	0x08003c74

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fac7 	bl	8000b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f805 	bl	80005ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8b4 	bl	8000730 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f868 	bl	800069c <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x14>

080005ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b0a8      	sub	sp, #160	; 0xa0
 80005d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d8:	2238      	movs	r2, #56	; 0x38
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fbeb 	bl	8002db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2254      	movs	r2, #84	; 0x54
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fbdd 	bl	8002db8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fdf2 	bl	80011e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2340      	movs	r3, #64	; 0x40
 8000610:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000624:	2355      	movs	r3, #85	; 0x55
 8000626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fe85 	bl	8001350 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800064c:	f000 f904 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f988 	bl	8001980 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000676:	f000 f8ef 	bl	8000858 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800067a:	2320      	movs	r3, #32
 800067c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb97 	bl	8001db8 <HAL_RCCEx_PeriphCLKConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000690:	f000 f8e2 	bl	8000858 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	37a0      	adds	r7, #160	; 0xa0
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	4a22      	ldr	r2, [pc, #136]	; (800072c <MX_LPUART1_UART_Init+0x90>)
 80006a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006e0:	f001 fdb6 	bl	8002250 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f8b5 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006f2:	f002 fa6d 	bl	8002bd0 <HAL_UARTEx_SetTxFifoThreshold>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006fc:	f000 f8ac 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	f002 faa2 	bl	8002c4c <HAL_UARTEx_SetRxFifoThreshold>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800070e:	f000 f8a3 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f002 fa23 	bl	8002b5e <HAL_UARTEx_DisableFifoMode>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800071e:	f000 f89b 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000098 	.word	0x20000098
 800072c:	40008000 	.word	0x40008000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_GPIO_Init+0xec>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a34      	ldr	r2, [pc, #208]	; (800081c <MX_GPIO_Init+0xec>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <MX_GPIO_Init+0xec>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <MX_GPIO_Init+0xec>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a2e      	ldr	r2, [pc, #184]	; (800081c <MX_GPIO_Init+0xec>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_GPIO_Init+0xec>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_GPIO_Init+0xec>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <MX_GPIO_Init+0xec>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_GPIO_Init+0xec>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_GPIO_Init+0xec>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a22      	ldr	r2, [pc, #136]	; (800081c <MX_GPIO_Init+0xec>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_GPIO_Init+0xec>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fcd1 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0xf0>)
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_GPIO_Init+0xf4>)
 80007c8:	f000 fb42 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2_Pin */
  GPIO_InitStruct.Pin = PC2_Pin;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_GPIO_Init+0xf8>)
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_GPIO_Init+0xf4>)
 80007e0:	f000 fb36 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e4:	2320      	movs	r3, #32
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f000 fb27 	bl	8000e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2008      	movs	r0, #8
 8000808:	f000 faed 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800080c:	2008      	movs	r0, #8
 800080e:	f000 fb04 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	10110000 	.word	0x10110000
 8000824:	48000800 	.word	0x48000800
 8000828:	10310000 	.word	0x10310000

0800082c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PC2_Pin)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d107      	bne.n	800084c <HAL_GPIO_EXTI_Callback+0x20>
	{
		printf("Interrupcao PC2");
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_GPIO_EXTI_Callback+0x28>)
 800083e:	f002 fac3 	bl	8002dc8 <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000842:	2120      	movs	r1, #32
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fc9c 	bl	8001184 <HAL_GPIO_TogglePin>
	}
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08003c8c 	.word	0x08003c8c

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800089a:	f000 fd49 	bl	8001330 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_UART_MspInit+0x7c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d128      	bne.n	8000920 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_UART_MspInit+0x80>)
 80008d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008d2:	4a16      	ldr	r2, [pc, #88]	; (800092c <HAL_UART_MspInit+0x80>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <HAL_UART_MspInit+0x80>)
 80008dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_UART_MspInit+0x80>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_UART_MspInit+0x80>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_UART_MspInit+0x80>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800090e:	230c      	movs	r3, #12
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fa98 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40008000 	.word	0x40008000
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f93a 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000988:	2004      	movs	r0, #4
 800098a:	f000 fc15 	bl	80011b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}

08000992 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	e00a      	b.n	80009ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009a4:	f3af 8000 	nop.w
 80009a8:	4601      	mov	r1, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	60ba      	str	r2, [r7, #8]
 80009b0:	b2ca      	uxtb	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	429a      	cmp	r2, r3
 80009c0:	dbf0      	blt.n	80009a4 <_read+0x12>
	}

return len;
 80009c2:	687b      	ldr	r3, [r7, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e009      	b.n	80009f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dbf1      	blt.n	80009de <_write+0x12>
	}
	return len;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_close>:

int _close(int file)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_isatty>:

int _isatty(int file)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	return 1;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b085      	sub	sp, #20
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f002 f962 	bl	8002d64 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20020000 	.word	0x20020000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	2000008c 	.word	0x2000008c
 8000ad4:	20000140 	.word	0x20000140

08000ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490e      	ldr	r1, [pc, #56]	; (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0b      	ldr	r4, [pc, #44]	; (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b26:	f7ff ffd7 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 f921 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fd43 	bl	80005b8 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   r0, =_estack
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b40:	08003d84 	.word	0x08003d84
  ldr r2, =_sbss
 8000b44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b48:	2000013c 	.word	0x2000013c

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>

08000b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f939 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f80e 	bl	8000b80 <HAL_InitTick>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e001      	b.n	8000b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b70:	f7ff fe78 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b74:	79fb      	ldrb	r3, [r7, #7]

}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_InitTick+0x68>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d022      	beq.n	8000bda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_InitTick+0x6c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_InitTick+0x68>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f944 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10f      	bne.n	8000bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b0f      	cmp	r3, #15
 8000bb8:	d809      	bhi.n	8000bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc2:	f000 f910 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0x70>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	e007      	b.n	8000bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e004      	b.n	8000bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e001      	b.n	8000bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x1c>)
 8000c04:	6013      	str	r3, [r2, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000128 	.word	0x20000128
 8000c14:	20000008 	.word	0x20000008

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000128 	.word	0x20000128

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff40 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff33 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa4 	bl	8000d8c <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e5e:	e15a      	b.n	8001116 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 814c 	beq.w	8001110 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d00b      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d007      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8c:	2b11      	cmp	r3, #17
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b12      	cmp	r3, #18
 8000e96:	d130      	bne.n	8000efa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	f003 0201 	and.w	r2, r3, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0xea>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80a6 	beq.w	8001110 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc8:	4a5a      	ldr	r2, [pc, #360]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fdc:	4a56      	ldr	r2, [pc, #344]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001006:	d01f      	beq.n	8001048 <HAL_GPIO_Init+0x1f8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_GPIO_Init+0x2ec>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d019      	beq.n	8001044 <HAL_GPIO_Init+0x1f4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_GPIO_Init+0x2f0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x1f0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <HAL_GPIO_Init+0x2f4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1ec>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a49      	ldr	r2, [pc, #292]	; (8001148 <HAL_GPIO_Init+0x2f8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1e8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_GPIO_Init+0x2fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001030:	2305      	movs	r3, #5
 8001032:	e00a      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001034:	2306      	movs	r3, #6
 8001036:	e008      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001038:	2304      	movs	r3, #4
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 800103c:	2303      	movs	r3, #3
 800103e:	e004      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001040:	2302      	movs	r3, #2
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001048:	2300      	movs	r3, #0
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105a:	4937      	ldr	r1, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001068:	4b39      	ldr	r3, [pc, #228]	; (8001150 <HAL_GPIO_Init+0x300>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800108c:	4a30      	ldr	r2, [pc, #192]	; (8001150 <HAL_GPIO_Init+0x300>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_GPIO_Init+0x300>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_GPIO_Init+0x300>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f ae9d 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000
 800113c:	48000400 	.word	0x48000400
 8001140:	48000800 	.word	0x48000800
 8001144:	48000c00 	.word	0x48000c00
 8001148:	48001000 	.word	0x48001000
 800114c:	48001400 	.word	0x48001400
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e002      	b.n	8001178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4013      	ands	r3, r2
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43d9      	mvns	r1, r3
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	400b      	ands	r3, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fb28 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d141      	bne.n	800127a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f6:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d131      	bne.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120a:	4a46      	ldr	r2, [pc, #280]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121c:	4a41      	ldr	r2, [pc, #260]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001224:	4b40      	ldr	r3, [pc, #256]	; (8001328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2232      	movs	r2, #50	; 0x32
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	4a3f      	ldr	r2, [pc, #252]	; (800132c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	0c9b      	lsrs	r3, r3, #18
 8001236:	3301      	adds	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123a:	e002      	b.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3b01      	subs	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124e:	d102      	bne.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f2      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001262:	d158      	bne.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e057      	b.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126e:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001278:	e04d      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001280:	d141      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800128a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128e:	d131      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2232      	movs	r2, #50	; 0x32
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	0c9b      	lsrs	r3, r3, #18
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c6:	e002      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	d102      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f2      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ee:	d112      	bne.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e011      	b.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001304:	e007      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001314:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40007000 	.word	0x40007000
 8001328:	20000000 	.word	0x20000000
 800132c:	431bde83 	.word	0x431bde83

08001330 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800133a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133e:	6093      	str	r3, [r2, #8]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e308      	b.n	8001974 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d075      	beq.n	800145a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136e:	4ba3      	ldr	r3, [pc, #652]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001378:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d102      	bne.n	800138e <HAL_RCC_OscConfig+0x3e>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d002      	beq.n	8001394 <HAL_RCC_OscConfig+0x44>
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d10b      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	4b99      	ldr	r3, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d05b      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d157      	bne.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2e3      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x74>
 80013b6:	4b91      	ldr	r3, [pc, #580]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a90      	ldr	r2, [pc, #576]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e01d      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b8b      	ldr	r3, [pc, #556]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a8a      	ldr	r2, [pc, #552]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013e8:	4b84      	ldr	r3, [pc, #528]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a83      	ldr	r2, [pc, #524]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a80      	ldr	r2, [pc, #512]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc06 	bl	8000c18 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fc02 	bl	8000c18 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e2a8      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xc0>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fbf2 	bl	8000c18 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fbee 	bl	8000c18 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e294      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144a:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0xe8>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d075      	beq.n	8001552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d102      	bne.n	8001486 <HAL_RCC_OscConfig+0x136>
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d002      	beq.n	800148c <HAL_RCC_OscConfig+0x13c>
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d11f      	bne.n	80014cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x154>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e267      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	4952      	ldr	r1, [pc, #328]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <HAL_RCC_OscConfig+0x2b0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb5f 	bl	8000b80 <HAL_InitTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d043      	beq.n	8001550 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e253      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb9a 	bl	8000c18 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb96 	bl	8000c18 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e23c      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fa:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	061b      	lsls	r3, r3, #24
 8001514:	4939      	ldr	r1, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
 800151a:	e01a      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151c:	4b37      	ldr	r3, [pc, #220]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a36      	ldr	r2, [pc, #216]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb76 	bl	8000c18 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fb72 	bl	8000c18 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e218      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1e0>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156c:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fb4f 	bl	8000c18 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fb4b 	bl	8000c18 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1f1      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ef      	beq.n	800157e <HAL_RCC_OscConfig+0x22e>
 800159e:	e01b      	b.n	80015d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a6:	4a15      	ldr	r2, [pc, #84]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fb32 	bl	8000c18 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fb2e 	bl	8000c18 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1d4      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ef      	bne.n	80015b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80ab 	beq.w	800173c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x2b4>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e005      	b.n	8001606 <HAL_RCC_OscConfig+0x2b6>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	20000004 	.word	0x20000004
 8001604:	2300      	movs	r3, #0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00d      	beq.n	8001626 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4baf      	ldr	r3, [pc, #700]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4aae      	ldr	r2, [pc, #696]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4bac      	ldr	r3, [pc, #688]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4ba9      	ldr	r3, [pc, #676]	; (80018cc <HAL_RCC_OscConfig+0x57c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001632:	4ba6      	ldr	r3, [pc, #664]	; (80018cc <HAL_RCC_OscConfig+0x57c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4aa5      	ldr	r2, [pc, #660]	; (80018cc <HAL_RCC_OscConfig+0x57c>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff faeb 	bl	8000c18 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fae7 	bl	8000c18 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e18d      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	4b9c      	ldr	r3, [pc, #624]	; (80018cc <HAL_RCC_OscConfig+0x57c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_RCC_OscConfig+0x32e>
 800166c:	4b96      	ldr	r3, [pc, #600]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	4a95      	ldr	r2, [pc, #596]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167c:	e024      	b.n	80016c8 <HAL_RCC_OscConfig+0x378>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d110      	bne.n	80016a8 <HAL_RCC_OscConfig+0x358>
 8001686:	4b90      	ldr	r3, [pc, #576]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	4a8e      	ldr	r2, [pc, #568]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001696:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169c:	4a8a      	ldr	r2, [pc, #552]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a6:	e00f      	b.n	80016c8 <HAL_RCC_OscConfig+0x378>
 80016a8:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a86      	ldr	r2, [pc, #536]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b8:	4b83      	ldr	r3, [pc, #524]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a82      	ldr	r2, [pc, #520]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d016      	beq.n	80016fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff faa2 	bl	8000c18 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fa9e 	bl	8000c18 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e142      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ee:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ed      	beq.n	80016d8 <HAL_RCC_OscConfig+0x388>
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa8b 	bl	8000c18 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fa87 	bl	8000c18 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e12b      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ed      	bne.n	8001706 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800172a:	7ffb      	ldrb	r3, [r7, #31]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	4a64      	ldr	r2, [pc, #400]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d03c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01c      	beq.n	800178a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001750:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001756:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fa5a 	bl	8000c18 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001768:	f7ff fa56 	bl	8000c18 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0fc      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800177c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ef      	beq.n	8001768 <HAL_RCC_OscConfig+0x418>
 8001788:	e01b      	b.n	80017c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800178c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001790:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff fa3d 	bl	8000c18 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a2:	f7ff fa39 	bl	8000c18 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0df      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ef      	bne.n	80017a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80d3 	beq.w	8001972 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	f000 808d 	beq.w	80018f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d15a      	bne.n	8001898 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80017e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fa13 	bl	8000c18 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fa0f 	bl	8000c18 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0b5      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_OscConfig+0x580>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a11      	ldr	r1, [r2, #32]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001824:	3a01      	subs	r2, #1
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800182e:	0212      	lsls	r2, r2, #8
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001836:	0852      	lsrs	r2, r2, #1
 8001838:	3a01      	subs	r2, #1
 800183a:	0552      	lsls	r2, r2, #21
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001842:	0852      	lsrs	r2, r2, #1
 8001844:	3a01      	subs	r2, #1
 8001846:	0652      	lsls	r2, r2, #25
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800184e:	06d2      	lsls	r2, r2, #27
 8001850:	430a      	orrs	r2, r1
 8001852:	491d      	ldr	r1, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f9d2 	bl	8000c18 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f9ce 	bl	8000c18 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e074      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x528>
 8001896:	e06c      	b.n	8001972 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 800189e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_RCC_OscConfig+0x578>)
 80018b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f9aa 	bl	8000c18 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	e00e      	b.n	80018e6 <HAL_RCC_OscConfig+0x596>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
 80018d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f9a0 	bl	8000c18 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e046      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_RCC_OscConfig+0x62c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x584>
 80018f2:	e03e      	b.n	8001972 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e039      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_RCC_OscConfig+0x62c>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	429a      	cmp	r2, r3
 8001912:	d12c      	bne.n	800196e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	3b01      	subs	r3, #1
 8001920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d123      	bne.n	800196e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d11b      	bne.n	800196e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d113      	bne.n	800196e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d109      	bne.n	800196e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e11e      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d910      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 020f 	bic.w	r2, r3, #15
 80019ae:	498c      	ldr	r1, [pc, #560]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b8a      	ldr	r3, [pc, #552]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e106      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d073      	beq.n	8001abc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d129      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019dc:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0f4      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019ec:	f000 f99e 	bl	8001d2c <RCC_GetSysClockFreqFromPLLSource>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4a7c      	ldr	r2, [pc, #496]	; (8001be8 <HAL_RCC_ClockConfig+0x268>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d93f      	bls.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019fa:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d033      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12f      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a22:	4a70      	ldr	r2, [pc, #448]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e024      	b.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0c6      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0be      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a58:	f000 f8ce 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4a61      	ldr	r2, [pc, #388]	; (8001be8 <HAL_RCC_ClockConfig+0x268>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d909      	bls.n	8001a7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a6e:	4a5d      	ldr	r2, [pc, #372]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4957      	ldr	r1, [pc, #348]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f8c4 	bl	8000c18 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f8c0 	bl	8000c18 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e095      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d023      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ade:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001af4:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4936      	ldr	r1, [pc, #216]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b80      	cmp	r3, #128	; 0x80
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b16:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d21d      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 020f 	bic.w	r2, r3, #15
 8001b38:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f86a 	bl	8000c18 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff f866 	bl	8000c18 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e03b      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1ed      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4917      	ldr	r1, [pc, #92]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	490f      	ldr	r1, [pc, #60]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001baa:	f000 f825 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	490c      	ldr	r1, [pc, #48]	; (8001bec <HAL_RCC_ClockConfig+0x26c>)
 8001bbc:	5ccb      	ldrb	r3, [r1, r3]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x270>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_ClockConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe ffd6 	bl	8000b80 <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	04c4b400 	.word	0x04c4b400
 8001bec:	08003c9c 	.word	0x08003c9c
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e047      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e03e      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d136      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3301      	adds	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	68d2      	ldr	r2, [r2, #12]
 8001c58:	0a12      	lsrs	r2, r2, #8
 8001c5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
      break;
 8001c64:	e00c      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c70:	68d2      	ldr	r2, [r2, #12]
 8001c72:	0a12      	lsrs	r2, r2, #8
 8001c74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
      break;
 8001c7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0e5b      	lsrs	r3, r3, #25
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e001      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	016e3600 	.word	0x016e3600

08001cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4904      	ldr	r1, [pc, #16]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003cac 	.word	0x08003cac

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d04:	f7ff ffda 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0adb      	lsrs	r3, r3, #11
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4904      	ldr	r1, [pc, #16]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08003cac 	.word	0x08003cac

08001d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3301      	adds	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d10c      	bne.n	8001d6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d5a:	68d2      	ldr	r2, [r2, #12]
 8001d5c:	0a12      	lsrs	r2, r2, #8
 8001d5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
    break;
 8001d68:	e00c      	b.n	8001d84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d74:	68d2      	ldr	r2, [r2, #12]
 8001d76:	0a12      	lsrs	r2, r2, #8
 8001d78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    break;
 8001d82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0e5b      	lsrs	r3, r3, #25
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000
 8001db0:	016e3600 	.word	0x016e3600
 8001db4:	00f42400 	.word	0x00f42400

08001db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8098 	beq.w	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a3f      	ldr	r2, [pc, #252]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a39      	ldr	r2, [pc, #228]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e0e:	f7fe ff03 	bl	8000c18 <HAL_GetTick>
 8001e12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e14:	e009      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7fe feff 	bl	8000c18 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d902      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	74fb      	strb	r3, [r7, #19]
        break;
 8001e28:	e005      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ef      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d159      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01e      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d019      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e84:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7fe febf 	bl	8000c18 <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7fe febb 	bl	8000c18 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d902      	bls.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8001eb4:	e006      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ec      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	74bb      	strb	r3, [r7, #18]
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef4:	7c7b      	ldrb	r3, [r7, #17]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4baf      	ldr	r3, [pc, #700]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	4aae      	ldr	r2, [pc, #696]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f12:	4ba9      	ldr	r3, [pc, #676]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f18:	f023 0203 	bic.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	49a5      	ldr	r1, [pc, #660]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f34:	4ba0      	ldr	r3, [pc, #640]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	f023 020c 	bic.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	499d      	ldr	r1, [pc, #628]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f56:	4b98      	ldr	r3, [pc, #608]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4994      	ldr	r1, [pc, #592]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f78:	4b8f      	ldr	r3, [pc, #572]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	498c      	ldr	r1, [pc, #560]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f9a:	4b87      	ldr	r3, [pc, #540]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	4983      	ldr	r1, [pc, #524]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	497b      	ldr	r1, [pc, #492]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	4972      	ldr	r1, [pc, #456]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002000:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	496a      	ldr	r1, [pc, #424]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	4961      	ldr	r1, [pc, #388]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002044:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	4959      	ldr	r1, [pc, #356]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	4950      	ldr	r1, [pc, #320]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4948      	ldr	r1, [pc, #288]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020c0:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	493a      	ldr	r1, [pc, #232]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	492c      	ldr	r1, [pc, #176]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	491e      	ldr	r1, [pc, #120]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4910      	ldr	r1, [pc, #64]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d018      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4902      	ldr	r1, [pc, #8]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021b6:	e001      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80021b8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021c4:	d105      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	4917      	ldr	r1, [pc, #92]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d105      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d015      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800221c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002234:	d105      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800223c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002240:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002242:	7cbb      	ldrb	r3, [r7, #18]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000

08002250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e042      	b.n	80022e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7fe fb19 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2224      	movs	r2, #36	; 0x24
 800227e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f82c 	bl	80022f0 <UART_SetConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 faea 	bl	8002884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fb71 	bl	80029c8 <UART_CheckIdleState>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4313      	orrs	r3, r2
 8002312:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4bb1      	ldr	r3, [pc, #708]	; (80025e0 <UART_SetConfig+0x2f0>)
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	69f9      	ldr	r1, [r7, #28]
 8002324:	430b      	orrs	r3, r1
 8002326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4aa6      	ldr	r2, [pc, #664]	; (80025e4 <UART_SetConfig+0x2f4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	4313      	orrs	r3, r2
 8002356:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002362:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	69f9      	ldr	r1, [r7, #28]
 800236c:	430b      	orrs	r3, r1
 800236e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f023 010f 	bic.w	r1, r3, #15
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a97      	ldr	r2, [pc, #604]	; (80025e8 <UART_SetConfig+0x2f8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d120      	bne.n	80023d2 <UART_SetConfig+0xe2>
 8002390:	4b96      	ldr	r3, [pc, #600]	; (80025ec <UART_SetConfig+0x2fc>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b03      	cmp	r3, #3
 800239c:	d816      	bhi.n	80023cc <UART_SetConfig+0xdc>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <UART_SetConfig+0xb4>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023bb 	.word	0x080023bb
 80023b0:	080023c7 	.word	0x080023c7
 80023b4:	2301      	movs	r3, #1
 80023b6:	76fb      	strb	r3, [r7, #27]
 80023b8:	e0e7      	b.n	800258a <UART_SetConfig+0x29a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	76fb      	strb	r3, [r7, #27]
 80023be:	e0e4      	b.n	800258a <UART_SetConfig+0x29a>
 80023c0:	2304      	movs	r3, #4
 80023c2:	76fb      	strb	r3, [r7, #27]
 80023c4:	e0e1      	b.n	800258a <UART_SetConfig+0x29a>
 80023c6:	2308      	movs	r3, #8
 80023c8:	76fb      	strb	r3, [r7, #27]
 80023ca:	e0de      	b.n	800258a <UART_SetConfig+0x29a>
 80023cc:	2310      	movs	r3, #16
 80023ce:	76fb      	strb	r3, [r7, #27]
 80023d0:	e0db      	b.n	800258a <UART_SetConfig+0x29a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a86      	ldr	r2, [pc, #536]	; (80025f0 <UART_SetConfig+0x300>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d132      	bne.n	8002442 <UART_SetConfig+0x152>
 80023dc:	4b83      	ldr	r3, [pc, #524]	; (80025ec <UART_SetConfig+0x2fc>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d828      	bhi.n	800243c <UART_SetConfig+0x14c>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <UART_SetConfig+0x100>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002425 	.word	0x08002425
 80023f4:	0800243d 	.word	0x0800243d
 80023f8:	0800243d 	.word	0x0800243d
 80023fc:	0800243d 	.word	0x0800243d
 8002400:	08002431 	.word	0x08002431
 8002404:	0800243d 	.word	0x0800243d
 8002408:	0800243d 	.word	0x0800243d
 800240c:	0800243d 	.word	0x0800243d
 8002410:	0800242b 	.word	0x0800242b
 8002414:	0800243d 	.word	0x0800243d
 8002418:	0800243d 	.word	0x0800243d
 800241c:	0800243d 	.word	0x0800243d
 8002420:	08002437 	.word	0x08002437
 8002424:	2300      	movs	r3, #0
 8002426:	76fb      	strb	r3, [r7, #27]
 8002428:	e0af      	b.n	800258a <UART_SetConfig+0x29a>
 800242a:	2302      	movs	r3, #2
 800242c:	76fb      	strb	r3, [r7, #27]
 800242e:	e0ac      	b.n	800258a <UART_SetConfig+0x29a>
 8002430:	2304      	movs	r3, #4
 8002432:	76fb      	strb	r3, [r7, #27]
 8002434:	e0a9      	b.n	800258a <UART_SetConfig+0x29a>
 8002436:	2308      	movs	r3, #8
 8002438:	76fb      	strb	r3, [r7, #27]
 800243a:	e0a6      	b.n	800258a <UART_SetConfig+0x29a>
 800243c:	2310      	movs	r3, #16
 800243e:	76fb      	strb	r3, [r7, #27]
 8002440:	e0a3      	b.n	800258a <UART_SetConfig+0x29a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6b      	ldr	r2, [pc, #428]	; (80025f4 <UART_SetConfig+0x304>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d120      	bne.n	800248e <UART_SetConfig+0x19e>
 800244c:	4b67      	ldr	r3, [pc, #412]	; (80025ec <UART_SetConfig+0x2fc>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002456:	2b30      	cmp	r3, #48	; 0x30
 8002458:	d013      	beq.n	8002482 <UART_SetConfig+0x192>
 800245a:	2b30      	cmp	r3, #48	; 0x30
 800245c:	d814      	bhi.n	8002488 <UART_SetConfig+0x198>
 800245e:	2b20      	cmp	r3, #32
 8002460:	d009      	beq.n	8002476 <UART_SetConfig+0x186>
 8002462:	2b20      	cmp	r3, #32
 8002464:	d810      	bhi.n	8002488 <UART_SetConfig+0x198>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <UART_SetConfig+0x180>
 800246a:	2b10      	cmp	r3, #16
 800246c:	d006      	beq.n	800247c <UART_SetConfig+0x18c>
 800246e:	e00b      	b.n	8002488 <UART_SetConfig+0x198>
 8002470:	2300      	movs	r3, #0
 8002472:	76fb      	strb	r3, [r7, #27]
 8002474:	e089      	b.n	800258a <UART_SetConfig+0x29a>
 8002476:	2302      	movs	r3, #2
 8002478:	76fb      	strb	r3, [r7, #27]
 800247a:	e086      	b.n	800258a <UART_SetConfig+0x29a>
 800247c:	2304      	movs	r3, #4
 800247e:	76fb      	strb	r3, [r7, #27]
 8002480:	e083      	b.n	800258a <UART_SetConfig+0x29a>
 8002482:	2308      	movs	r3, #8
 8002484:	76fb      	strb	r3, [r7, #27]
 8002486:	e080      	b.n	800258a <UART_SetConfig+0x29a>
 8002488:	2310      	movs	r3, #16
 800248a:	76fb      	strb	r3, [r7, #27]
 800248c:	e07d      	b.n	800258a <UART_SetConfig+0x29a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a59      	ldr	r2, [pc, #356]	; (80025f8 <UART_SetConfig+0x308>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d120      	bne.n	80024da <UART_SetConfig+0x1ea>
 8002498:	4b54      	ldr	r3, [pc, #336]	; (80025ec <UART_SetConfig+0x2fc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80024a2:	2bc0      	cmp	r3, #192	; 0xc0
 80024a4:	d013      	beq.n	80024ce <UART_SetConfig+0x1de>
 80024a6:	2bc0      	cmp	r3, #192	; 0xc0
 80024a8:	d814      	bhi.n	80024d4 <UART_SetConfig+0x1e4>
 80024aa:	2b80      	cmp	r3, #128	; 0x80
 80024ac:	d009      	beq.n	80024c2 <UART_SetConfig+0x1d2>
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	d810      	bhi.n	80024d4 <UART_SetConfig+0x1e4>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <UART_SetConfig+0x1cc>
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d006      	beq.n	80024c8 <UART_SetConfig+0x1d8>
 80024ba:	e00b      	b.n	80024d4 <UART_SetConfig+0x1e4>
 80024bc:	2300      	movs	r3, #0
 80024be:	76fb      	strb	r3, [r7, #27]
 80024c0:	e063      	b.n	800258a <UART_SetConfig+0x29a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	76fb      	strb	r3, [r7, #27]
 80024c6:	e060      	b.n	800258a <UART_SetConfig+0x29a>
 80024c8:	2304      	movs	r3, #4
 80024ca:	76fb      	strb	r3, [r7, #27]
 80024cc:	e05d      	b.n	800258a <UART_SetConfig+0x29a>
 80024ce:	2308      	movs	r3, #8
 80024d0:	76fb      	strb	r3, [r7, #27]
 80024d2:	e05a      	b.n	800258a <UART_SetConfig+0x29a>
 80024d4:	2310      	movs	r3, #16
 80024d6:	76fb      	strb	r3, [r7, #27]
 80024d8:	e057      	b.n	800258a <UART_SetConfig+0x29a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a47      	ldr	r2, [pc, #284]	; (80025fc <UART_SetConfig+0x30c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d125      	bne.n	8002530 <UART_SetConfig+0x240>
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <UART_SetConfig+0x2fc>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f2:	d017      	beq.n	8002524 <UART_SetConfig+0x234>
 80024f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f8:	d817      	bhi.n	800252a <UART_SetConfig+0x23a>
 80024fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024fe:	d00b      	beq.n	8002518 <UART_SetConfig+0x228>
 8002500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002504:	d811      	bhi.n	800252a <UART_SetConfig+0x23a>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <UART_SetConfig+0x222>
 800250a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250e:	d006      	beq.n	800251e <UART_SetConfig+0x22e>
 8002510:	e00b      	b.n	800252a <UART_SetConfig+0x23a>
 8002512:	2300      	movs	r3, #0
 8002514:	76fb      	strb	r3, [r7, #27]
 8002516:	e038      	b.n	800258a <UART_SetConfig+0x29a>
 8002518:	2302      	movs	r3, #2
 800251a:	76fb      	strb	r3, [r7, #27]
 800251c:	e035      	b.n	800258a <UART_SetConfig+0x29a>
 800251e:	2304      	movs	r3, #4
 8002520:	76fb      	strb	r3, [r7, #27]
 8002522:	e032      	b.n	800258a <UART_SetConfig+0x29a>
 8002524:	2308      	movs	r3, #8
 8002526:	76fb      	strb	r3, [r7, #27]
 8002528:	e02f      	b.n	800258a <UART_SetConfig+0x29a>
 800252a:	2310      	movs	r3, #16
 800252c:	76fb      	strb	r3, [r7, #27]
 800252e:	e02c      	b.n	800258a <UART_SetConfig+0x29a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <UART_SetConfig+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d125      	bne.n	8002586 <UART_SetConfig+0x296>
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <UART_SetConfig+0x2fc>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002548:	d017      	beq.n	800257a <UART_SetConfig+0x28a>
 800254a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800254e:	d817      	bhi.n	8002580 <UART_SetConfig+0x290>
 8002550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002554:	d00b      	beq.n	800256e <UART_SetConfig+0x27e>
 8002556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255a:	d811      	bhi.n	8002580 <UART_SetConfig+0x290>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <UART_SetConfig+0x278>
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002564:	d006      	beq.n	8002574 <UART_SetConfig+0x284>
 8002566:	e00b      	b.n	8002580 <UART_SetConfig+0x290>
 8002568:	2300      	movs	r3, #0
 800256a:	76fb      	strb	r3, [r7, #27]
 800256c:	e00d      	b.n	800258a <UART_SetConfig+0x29a>
 800256e:	2302      	movs	r3, #2
 8002570:	76fb      	strb	r3, [r7, #27]
 8002572:	e00a      	b.n	800258a <UART_SetConfig+0x29a>
 8002574:	2304      	movs	r3, #4
 8002576:	76fb      	strb	r3, [r7, #27]
 8002578:	e007      	b.n	800258a <UART_SetConfig+0x29a>
 800257a:	2308      	movs	r3, #8
 800257c:	76fb      	strb	r3, [r7, #27]
 800257e:	e004      	b.n	800258a <UART_SetConfig+0x29a>
 8002580:	2310      	movs	r3, #16
 8002582:	76fb      	strb	r3, [r7, #27]
 8002584:	e001      	b.n	800258a <UART_SetConfig+0x29a>
 8002586:	2310      	movs	r3, #16
 8002588:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <UART_SetConfig+0x2f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	f040 809f 	bne.w	80026d4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002596:	7efb      	ldrb	r3, [r7, #27]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d837      	bhi.n	800260c <UART_SetConfig+0x31c>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <UART_SetConfig+0x2b4>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025c9 	.word	0x080025c9
 80025a8:	0800260d 	.word	0x0800260d
 80025ac:	080025d1 	.word	0x080025d1
 80025b0:	0800260d 	.word	0x0800260d
 80025b4:	080025d7 	.word	0x080025d7
 80025b8:	0800260d 	.word	0x0800260d
 80025bc:	0800260d 	.word	0x0800260d
 80025c0:	0800260d 	.word	0x0800260d
 80025c4:	08002605 	.word	0x08002605
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c8:	f7ff fb84 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80025cc:	6178      	str	r0, [r7, #20]
        break;
 80025ce:	e022      	b.n	8002616 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <UART_SetConfig+0x310>)
 80025d2:	617b      	str	r3, [r7, #20]
        break;
 80025d4:	e01f      	b.n	8002616 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025d6:	f7ff fb0f 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 80025da:	6178      	str	r0, [r7, #20]
        break;
 80025dc:	e01b      	b.n	8002616 <UART_SetConfig+0x326>
 80025de:	bf00      	nop
 80025e0:	cfff69f3 	.word	0xcfff69f3
 80025e4:	40008000 	.word	0x40008000
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40004400 	.word	0x40004400
 80025f4:	40004800 	.word	0x40004800
 80025f8:	40004c00 	.word	0x40004c00
 80025fc:	40005000 	.word	0x40005000
 8002600:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002608:	617b      	str	r3, [r7, #20]
        break;
 800260a:	e004      	b.n	8002616 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	76bb      	strb	r3, [r7, #26]
        break;
 8002614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 811b 	beq.w	8002854 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	4a96      	ldr	r2, [pc, #600]	; (800287c <UART_SetConfig+0x58c>)
 8002624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002628:	461a      	mov	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002630:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d305      	bcc.n	800264e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d902      	bls.n	8002654 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	76bb      	strb	r3, [r7, #26]
 8002652:	e0ff      	b.n	8002854 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4618      	mov	r0, r3
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	4a86      	ldr	r2, [pc, #536]	; (800287c <UART_SetConfig+0x58c>)
 8002662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002666:	b29a      	uxth	r2, r3
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	f7fd fe28 	bl	80002c0 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	020b      	lsls	r3, r1, #8
 8002682:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002686:	0202      	lsls	r2, r0, #8
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	6849      	ldr	r1, [r1, #4]
 800268c:	0849      	lsrs	r1, r1, #1
 800268e:	4608      	mov	r0, r1
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	1814      	adds	r4, r2, r0
 8002696:	eb43 0501 	adc.w	r5, r3, r1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	461a      	mov	r2, r3
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7fd fe0a 	bl	80002c0 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ba:	d308      	bcc.n	80026ce <UART_SetConfig+0x3de>
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c2:	d204      	bcs.n	80026ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	e0c2      	b.n	8002854 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	76bb      	strb	r3, [r7, #26]
 80026d2:	e0bf      	b.n	8002854 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	d165      	bne.n	80027aa <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80026de:	7efb      	ldrb	r3, [r7, #27]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d828      	bhi.n	8002736 <UART_SetConfig+0x446>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <UART_SetConfig+0x3fc>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002711 	.word	0x08002711
 80026f0:	08002719 	.word	0x08002719
 80026f4:	08002721 	.word	0x08002721
 80026f8:	08002737 	.word	0x08002737
 80026fc:	08002727 	.word	0x08002727
 8002700:	08002737 	.word	0x08002737
 8002704:	08002737 	.word	0x08002737
 8002708:	08002737 	.word	0x08002737
 800270c:	0800272f 	.word	0x0800272f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff fae0 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002714:	6178      	str	r0, [r7, #20]
        break;
 8002716:	e013      	b.n	8002740 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002718:	f7ff faf2 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 800271c:	6178      	str	r0, [r7, #20]
        break;
 800271e:	e00f      	b.n	8002740 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <UART_SetConfig+0x590>)
 8002722:	617b      	str	r3, [r7, #20]
        break;
 8002724:	e00c      	b.n	8002740 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002726:	f7ff fa67 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 800272a:	6178      	str	r0, [r7, #20]
        break;
 800272c:	e008      	b.n	8002740 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800272e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002732:	617b      	str	r3, [r7, #20]
        break;
 8002734:	e004      	b.n	8002740 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	76bb      	strb	r3, [r7, #26]
        break;
 800273e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8086 	beq.w	8002854 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	4a4b      	ldr	r2, [pc, #300]	; (800287c <UART_SetConfig+0x58c>)
 800274e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002752:	461a      	mov	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fbb3 f3f2 	udiv	r3, r3, r2
 800275a:	005a      	lsls	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	d916      	bls.n	80027a4 <UART_SetConfig+0x4b4>
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d212      	bcs.n	80027a4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f023 030f 	bic.w	r3, r3, #15
 8002786:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	b29a      	uxth	r2, r3
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	4313      	orrs	r3, r2
 8002798:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	89fa      	ldrh	r2, [r7, #14]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	e057      	b.n	8002854 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	76bb      	strb	r3, [r7, #26]
 80027a8:	e054      	b.n	8002854 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027aa:	7efb      	ldrb	r3, [r7, #27]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d828      	bhi.n	8002802 <UART_SetConfig+0x512>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <UART_SetConfig+0x4c8>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	080027e5 	.word	0x080027e5
 80027c0:	080027ed 	.word	0x080027ed
 80027c4:	08002803 	.word	0x08002803
 80027c8:	080027f3 	.word	0x080027f3
 80027cc:	08002803 	.word	0x08002803
 80027d0:	08002803 	.word	0x08002803
 80027d4:	08002803 	.word	0x08002803
 80027d8:	080027fb 	.word	0x080027fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027dc:	f7ff fa7a 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80027e0:	6178      	str	r0, [r7, #20]
        break;
 80027e2:	e013      	b.n	800280c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027e4:	f7ff fa8c 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 80027e8:	6178      	str	r0, [r7, #20]
        break;
 80027ea:	e00f      	b.n	800280c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <UART_SetConfig+0x590>)
 80027ee:	617b      	str	r3, [r7, #20]
        break;
 80027f0:	e00c      	b.n	800280c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027f2:	f7ff fa01 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 80027f6:	6178      	str	r0, [r7, #20]
        break;
 80027f8:	e008      	b.n	800280c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fe:	617b      	str	r3, [r7, #20]
        break;
 8002800:	e004      	b.n	800280c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	76bb      	strb	r3, [r7, #26]
        break;
 800280a:	bf00      	nop
    }

    if (pclk != 0U)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <UART_SetConfig+0x58c>)
 8002818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800281c:	461a      	mov	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fbb3 f2f2 	udiv	r2, r3, r2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	b29b      	uxth	r3, r3
 8002836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	d908      	bls.n	8002850 <UART_SetConfig+0x560>
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d204      	bcs.n	8002850 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	e001      	b.n	8002854 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002870:	7ebb      	ldrb	r3, [r7, #26]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bdb0      	pop	{r4, r5, r7, pc}
 800287a:	bf00      	nop
 800287c:	08003cb4 	.word	0x08003cb4
 8002880:	00f42400 	.word	0x00f42400

08002884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01a      	beq.n	800299a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002982:	d10a      	bne.n	800299a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]
  }
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029d8:	f7fe f91e 	bl	8000c18 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d10e      	bne.n	8002a0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f82f 	bl	8002a5e <UART_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e025      	b.n	8002a56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d10e      	bne.n	8002a36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f819 	bl	8002a5e <UART_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e00f      	b.n	8002a56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6e:	e062      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d05e      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe f8ce 	bl	8000c18 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e045      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02e      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae6:	d126      	bne.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d08d      	beq.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UARTEx_DisableFifoMode+0x16>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e027      	b.n	8002bc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002ba2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e02d      	b.n	8002c44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f84f 	bl	8002cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e02d      	b.n	8002cc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f811 	bl	8002cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ce8:	e031      	b.n	8002d4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002cea:	2308      	movs	r3, #8
 8002cec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002cee:	2308      	movs	r3, #8
 8002cf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	0e5b      	lsrs	r3, r3, #25
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	0f5b      	lsrs	r3, r3, #29
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d12:	7bbb      	ldrb	r3, [r7, #14]
 8002d14:	7b3a      	ldrb	r2, [r7, #12]
 8002d16:	4911      	ldr	r1, [pc, #68]	; (8002d5c <UARTEx_SetNbDataToProcess+0x94>)
 8002d18:	5c8a      	ldrb	r2, [r1, r2]
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d1e:	7b3a      	ldrb	r2, [r7, #12]
 8002d20:	490f      	ldr	r1, [pc, #60]	; (8002d60 <UARTEx_SetNbDataToProcess+0x98>)
 8002d22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	7b7a      	ldrb	r2, [r7, #13]
 8002d34:	4909      	ldr	r1, [pc, #36]	; (8002d5c <UARTEx_SetNbDataToProcess+0x94>)
 8002d36:	5c8a      	ldrb	r2, [r1, r2]
 8002d38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d3c:	7b7a      	ldrb	r2, [r7, #13]
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <UARTEx_SetNbDataToProcess+0x98>)
 8002d40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	08003ccc 	.word	0x08003ccc
 8002d60:	08003cd4 	.word	0x08003cd4

08002d64 <__errno>:
 8002d64:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <__errno+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4d0d      	ldr	r5, [pc, #52]	; (8002da8 <__libc_init_array+0x38>)
 8002d74:	4c0d      	ldr	r4, [pc, #52]	; (8002dac <__libc_init_array+0x3c>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	4d0b      	ldr	r5, [pc, #44]	; (8002db0 <__libc_init_array+0x40>)
 8002d82:	4c0c      	ldr	r4, [pc, #48]	; (8002db4 <__libc_init_array+0x44>)
 8002d84:	f000 ff76 	bl	8003c74 <_init>
 8002d88:	1b64      	subs	r4, r4, r5
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	08003d7c 	.word	0x08003d7c
 8002dac:	08003d7c 	.word	0x08003d7c
 8002db0:	08003d7c 	.word	0x08003d7c
 8002db4:	08003d80 	.word	0x08003d80

08002db8 <memset>:
 8002db8:	4402      	add	r2, r0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <iprintf>:
 8002dc8:	b40f      	push	{r0, r1, r2, r3}
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <iprintf+0x2c>)
 8002dcc:	b513      	push	{r0, r1, r4, lr}
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	b124      	cbz	r4, 8002ddc <iprintf+0x14>
 8002dd2:	69a3      	ldr	r3, [r4, #24]
 8002dd4:	b913      	cbnz	r3, 8002ddc <iprintf+0x14>
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 f866 	bl	8002ea8 <__sinit>
 8002ddc:	ab05      	add	r3, sp, #20
 8002dde:	9a04      	ldr	r2, [sp, #16]
 8002de0:	68a1      	ldr	r1, [r4, #8]
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	4620      	mov	r0, r4
 8002de6:	f000 f983 	bl	80030f0 <_vfiprintf_r>
 8002dea:	b002      	add	sp, #8
 8002dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df0:	b004      	add	sp, #16
 8002df2:	4770      	bx	lr
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <std>:
 8002df8:	2300      	movs	r3, #0
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8002e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e06:	6083      	str	r3, [r0, #8]
 8002e08:	8181      	strh	r1, [r0, #12]
 8002e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e0c:	81c2      	strh	r2, [r0, #14]
 8002e0e:	6183      	str	r3, [r0, #24]
 8002e10:	4619      	mov	r1, r3
 8002e12:	2208      	movs	r2, #8
 8002e14:	305c      	adds	r0, #92	; 0x5c
 8002e16:	f7ff ffcf 	bl	8002db8 <memset>
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <std+0x38>)
 8002e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <std+0x3c>)
 8002e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <std+0x40>)
 8002e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <std+0x44>)
 8002e28:	6224      	str	r4, [r4, #32]
 8002e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	bf00      	nop
 8002e30:	08003699 	.word	0x08003699
 8002e34:	080036bb 	.word	0x080036bb
 8002e38:	080036f3 	.word	0x080036f3
 8002e3c:	08003717 	.word	0x08003717

08002e40 <_cleanup_r>:
 8002e40:	4901      	ldr	r1, [pc, #4]	; (8002e48 <_cleanup_r+0x8>)
 8002e42:	f000 b8af 	b.w	8002fa4 <_fwalk_reent>
 8002e46:	bf00      	nop
 8002e48:	080039f1 	.word	0x080039f1

08002e4c <__sfmoreglue>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	1e4a      	subs	r2, r1, #1
 8002e50:	2568      	movs	r5, #104	; 0x68
 8002e52:	4355      	muls	r5, r2
 8002e54:	460e      	mov	r6, r1
 8002e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e5a:	f000 f8c5 	bl	8002fe8 <_malloc_r>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	b140      	cbz	r0, 8002e74 <__sfmoreglue+0x28>
 8002e62:	2100      	movs	r1, #0
 8002e64:	e9c0 1600 	strd	r1, r6, [r0]
 8002e68:	300c      	adds	r0, #12
 8002e6a:	60a0      	str	r0, [r4, #8]
 8002e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e70:	f7ff ffa2 	bl	8002db8 <memset>
 8002e74:	4620      	mov	r0, r4
 8002e76:	bd70      	pop	{r4, r5, r6, pc}

08002e78 <__sfp_lock_acquire>:
 8002e78:	4801      	ldr	r0, [pc, #4]	; (8002e80 <__sfp_lock_acquire+0x8>)
 8002e7a:	f000 b8b3 	b.w	8002fe4 <__retarget_lock_acquire_recursive>
 8002e7e:	bf00      	nop
 8002e80:	20000134 	.word	0x20000134

08002e84 <__sfp_lock_release>:
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <__sfp_lock_release+0x8>)
 8002e86:	f000 b8ae 	b.w	8002fe6 <__retarget_lock_release_recursive>
 8002e8a:	bf00      	nop
 8002e8c:	20000134 	.word	0x20000134

08002e90 <__sinit_lock_acquire>:
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <__sinit_lock_acquire+0x8>)
 8002e92:	f000 b8a7 	b.w	8002fe4 <__retarget_lock_acquire_recursive>
 8002e96:	bf00      	nop
 8002e98:	2000012f 	.word	0x2000012f

08002e9c <__sinit_lock_release>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <__sinit_lock_release+0x8>)
 8002e9e:	f000 b8a2 	b.w	8002fe6 <__retarget_lock_release_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	2000012f 	.word	0x2000012f

08002ea8 <__sinit>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4604      	mov	r4, r0
 8002eac:	f7ff fff0 	bl	8002e90 <__sinit_lock_acquire>
 8002eb0:	69a3      	ldr	r3, [r4, #24]
 8002eb2:	b11b      	cbz	r3, 8002ebc <__sinit+0x14>
 8002eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eb8:	f7ff bff0 	b.w	8002e9c <__sinit_lock_release>
 8002ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <__sinit+0x68>)
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <__sinit+0x6c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002eca:	42a3      	cmp	r3, r4
 8002ecc:	bf04      	itt	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	61a3      	streq	r3, [r4, #24]
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 f820 	bl	8002f18 <__sfp>
 8002ed8:	6060      	str	r0, [r4, #4]
 8002eda:	4620      	mov	r0, r4
 8002edc:	f000 f81c 	bl	8002f18 <__sfp>
 8002ee0:	60a0      	str	r0, [r4, #8]
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f000 f818 	bl	8002f18 <__sfp>
 8002ee8:	2200      	movs	r2, #0
 8002eea:	60e0      	str	r0, [r4, #12]
 8002eec:	2104      	movs	r1, #4
 8002eee:	6860      	ldr	r0, [r4, #4]
 8002ef0:	f7ff ff82 	bl	8002df8 <std>
 8002ef4:	68a0      	ldr	r0, [r4, #8]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2109      	movs	r1, #9
 8002efa:	f7ff ff7d 	bl	8002df8 <std>
 8002efe:	68e0      	ldr	r0, [r4, #12]
 8002f00:	2202      	movs	r2, #2
 8002f02:	2112      	movs	r1, #18
 8002f04:	f7ff ff78 	bl	8002df8 <std>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	61a3      	str	r3, [r4, #24]
 8002f0c:	e7d2      	b.n	8002eb4 <__sinit+0xc>
 8002f0e:	bf00      	nop
 8002f10:	08003cdc 	.word	0x08003cdc
 8002f14:	08002e41 	.word	0x08002e41

08002f18 <__sfp>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	4607      	mov	r7, r0
 8002f1c:	f7ff ffac 	bl	8002e78 <__sfp_lock_acquire>
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <__sfp+0x84>)
 8002f22:	681e      	ldr	r6, [r3, #0]
 8002f24:	69b3      	ldr	r3, [r6, #24]
 8002f26:	b913      	cbnz	r3, 8002f2e <__sfp+0x16>
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f7ff ffbd 	bl	8002ea8 <__sinit>
 8002f2e:	3648      	adds	r6, #72	; 0x48
 8002f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	d503      	bpl.n	8002f40 <__sfp+0x28>
 8002f38:	6833      	ldr	r3, [r6, #0]
 8002f3a:	b30b      	cbz	r3, 8002f80 <__sfp+0x68>
 8002f3c:	6836      	ldr	r6, [r6, #0]
 8002f3e:	e7f7      	b.n	8002f30 <__sfp+0x18>
 8002f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f44:	b9d5      	cbnz	r5, 8002f7c <__sfp+0x64>
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <__sfp+0x88>)
 8002f48:	60e3      	str	r3, [r4, #12]
 8002f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8002f50:	f000 f847 	bl	8002fe2 <__retarget_lock_init_recursive>
 8002f54:	f7ff ff96 	bl	8002e84 <__sfp_lock_release>
 8002f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f60:	6025      	str	r5, [r4, #0]
 8002f62:	61a5      	str	r5, [r4, #24]
 8002f64:	2208      	movs	r2, #8
 8002f66:	4629      	mov	r1, r5
 8002f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f6c:	f7ff ff24 	bl	8002db8 <memset>
 8002f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f78:	4620      	mov	r0, r4
 8002f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f7c:	3468      	adds	r4, #104	; 0x68
 8002f7e:	e7d9      	b.n	8002f34 <__sfp+0x1c>
 8002f80:	2104      	movs	r1, #4
 8002f82:	4638      	mov	r0, r7
 8002f84:	f7ff ff62 	bl	8002e4c <__sfmoreglue>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	6030      	str	r0, [r6, #0]
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1d5      	bne.n	8002f3c <__sfp+0x24>
 8002f90:	f7ff ff78 	bl	8002e84 <__sfp_lock_release>
 8002f94:	230c      	movs	r3, #12
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	e7ee      	b.n	8002f78 <__sfp+0x60>
 8002f9a:	bf00      	nop
 8002f9c:	08003cdc 	.word	0x08003cdc
 8002fa0:	ffff0001 	.word	0xffff0001

08002fa4 <_fwalk_reent>:
 8002fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa8:	4606      	mov	r6, r0
 8002faa:	4688      	mov	r8, r1
 8002fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fb0:	2700      	movs	r7, #0
 8002fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8002fba:	d505      	bpl.n	8002fc8 <_fwalk_reent+0x24>
 8002fbc:	6824      	ldr	r4, [r4, #0]
 8002fbe:	2c00      	cmp	r4, #0
 8002fc0:	d1f7      	bne.n	8002fb2 <_fwalk_reent+0xe>
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc8:	89ab      	ldrh	r3, [r5, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d907      	bls.n	8002fde <_fwalk_reent+0x3a>
 8002fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	d003      	beq.n	8002fde <_fwalk_reent+0x3a>
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	4630      	mov	r0, r6
 8002fda:	47c0      	blx	r8
 8002fdc:	4307      	orrs	r7, r0
 8002fde:	3568      	adds	r5, #104	; 0x68
 8002fe0:	e7e9      	b.n	8002fb6 <_fwalk_reent+0x12>

08002fe2 <__retarget_lock_init_recursive>:
 8002fe2:	4770      	bx	lr

08002fe4 <__retarget_lock_acquire_recursive>:
 8002fe4:	4770      	bx	lr

08002fe6 <__retarget_lock_release_recursive>:
 8002fe6:	4770      	bx	lr

08002fe8 <_malloc_r>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	1ccd      	adds	r5, r1, #3
 8002fec:	f025 0503 	bic.w	r5, r5, #3
 8002ff0:	3508      	adds	r5, #8
 8002ff2:	2d0c      	cmp	r5, #12
 8002ff4:	bf38      	it	cc
 8002ff6:	250c      	movcc	r5, #12
 8002ff8:	2d00      	cmp	r5, #0
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	db01      	blt.n	8003002 <_malloc_r+0x1a>
 8002ffe:	42a9      	cmp	r1, r5
 8003000:	d903      	bls.n	800300a <_malloc_r+0x22>
 8003002:	230c      	movs	r3, #12
 8003004:	6033      	str	r3, [r6, #0]
 8003006:	2000      	movs	r0, #0
 8003008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800300a:	f000 fda3 	bl	8003b54 <__malloc_lock>
 800300e:	4921      	ldr	r1, [pc, #132]	; (8003094 <_malloc_r+0xac>)
 8003010:	680a      	ldr	r2, [r1, #0]
 8003012:	4614      	mov	r4, r2
 8003014:	b99c      	cbnz	r4, 800303e <_malloc_r+0x56>
 8003016:	4f20      	ldr	r7, [pc, #128]	; (8003098 <_malloc_r+0xb0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b923      	cbnz	r3, 8003026 <_malloc_r+0x3e>
 800301c:	4621      	mov	r1, r4
 800301e:	4630      	mov	r0, r6
 8003020:	f000 fb2a 	bl	8003678 <_sbrk_r>
 8003024:	6038      	str	r0, [r7, #0]
 8003026:	4629      	mov	r1, r5
 8003028:	4630      	mov	r0, r6
 800302a:	f000 fb25 	bl	8003678 <_sbrk_r>
 800302e:	1c43      	adds	r3, r0, #1
 8003030:	d123      	bne.n	800307a <_malloc_r+0x92>
 8003032:	230c      	movs	r3, #12
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	4630      	mov	r0, r6
 8003038:	f000 fd92 	bl	8003b60 <__malloc_unlock>
 800303c:	e7e3      	b.n	8003006 <_malloc_r+0x1e>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	1b5b      	subs	r3, r3, r5
 8003042:	d417      	bmi.n	8003074 <_malloc_r+0x8c>
 8003044:	2b0b      	cmp	r3, #11
 8003046:	d903      	bls.n	8003050 <_malloc_r+0x68>
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	441c      	add	r4, r3
 800304c:	6025      	str	r5, [r4, #0]
 800304e:	e004      	b.n	800305a <_malloc_r+0x72>
 8003050:	6863      	ldr	r3, [r4, #4]
 8003052:	42a2      	cmp	r2, r4
 8003054:	bf0c      	ite	eq
 8003056:	600b      	streq	r3, [r1, #0]
 8003058:	6053      	strne	r3, [r2, #4]
 800305a:	4630      	mov	r0, r6
 800305c:	f000 fd80 	bl	8003b60 <__malloc_unlock>
 8003060:	f104 000b 	add.w	r0, r4, #11
 8003064:	1d23      	adds	r3, r4, #4
 8003066:	f020 0007 	bic.w	r0, r0, #7
 800306a:	1ac2      	subs	r2, r0, r3
 800306c:	d0cc      	beq.n	8003008 <_malloc_r+0x20>
 800306e:	1a1b      	subs	r3, r3, r0
 8003070:	50a3      	str	r3, [r4, r2]
 8003072:	e7c9      	b.n	8003008 <_malloc_r+0x20>
 8003074:	4622      	mov	r2, r4
 8003076:	6864      	ldr	r4, [r4, #4]
 8003078:	e7cc      	b.n	8003014 <_malloc_r+0x2c>
 800307a:	1cc4      	adds	r4, r0, #3
 800307c:	f024 0403 	bic.w	r4, r4, #3
 8003080:	42a0      	cmp	r0, r4
 8003082:	d0e3      	beq.n	800304c <_malloc_r+0x64>
 8003084:	1a21      	subs	r1, r4, r0
 8003086:	4630      	mov	r0, r6
 8003088:	f000 faf6 	bl	8003678 <_sbrk_r>
 800308c:	3001      	adds	r0, #1
 800308e:	d1dd      	bne.n	800304c <_malloc_r+0x64>
 8003090:	e7cf      	b.n	8003032 <_malloc_r+0x4a>
 8003092:	bf00      	nop
 8003094:	20000090 	.word	0x20000090
 8003098:	20000094 	.word	0x20000094

0800309c <__sfputc_r>:
 800309c:	6893      	ldr	r3, [r2, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	b410      	push	{r4}
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	da08      	bge.n	80030ba <__sfputc_r+0x1e>
 80030a8:	6994      	ldr	r4, [r2, #24]
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	db01      	blt.n	80030b2 <__sfputc_r+0x16>
 80030ae:	290a      	cmp	r1, #10
 80030b0:	d103      	bne.n	80030ba <__sfputc_r+0x1e>
 80030b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030b6:	f000 bb33 	b.w	8003720 <__swbuf_r>
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	1c58      	adds	r0, r3, #1
 80030be:	6010      	str	r0, [r2, #0]
 80030c0:	7019      	strb	r1, [r3, #0]
 80030c2:	4608      	mov	r0, r1
 80030c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <__sfputs_r>:
 80030ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030cc:	4606      	mov	r6, r0
 80030ce:	460f      	mov	r7, r1
 80030d0:	4614      	mov	r4, r2
 80030d2:	18d5      	adds	r5, r2, r3
 80030d4:	42ac      	cmp	r4, r5
 80030d6:	d101      	bne.n	80030dc <__sfputs_r+0x12>
 80030d8:	2000      	movs	r0, #0
 80030da:	e007      	b.n	80030ec <__sfputs_r+0x22>
 80030dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e0:	463a      	mov	r2, r7
 80030e2:	4630      	mov	r0, r6
 80030e4:	f7ff ffda 	bl	800309c <__sfputc_r>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d1f3      	bne.n	80030d4 <__sfputs_r+0xa>
 80030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030f0 <_vfiprintf_r>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	460d      	mov	r5, r1
 80030f6:	b09d      	sub	sp, #116	; 0x74
 80030f8:	4614      	mov	r4, r2
 80030fa:	4698      	mov	r8, r3
 80030fc:	4606      	mov	r6, r0
 80030fe:	b118      	cbz	r0, 8003108 <_vfiprintf_r+0x18>
 8003100:	6983      	ldr	r3, [r0, #24]
 8003102:	b90b      	cbnz	r3, 8003108 <_vfiprintf_r+0x18>
 8003104:	f7ff fed0 	bl	8002ea8 <__sinit>
 8003108:	4b89      	ldr	r3, [pc, #548]	; (8003330 <_vfiprintf_r+0x240>)
 800310a:	429d      	cmp	r5, r3
 800310c:	d11b      	bne.n	8003146 <_vfiprintf_r+0x56>
 800310e:	6875      	ldr	r5, [r6, #4]
 8003110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003112:	07d9      	lsls	r1, r3, #31
 8003114:	d405      	bmi.n	8003122 <_vfiprintf_r+0x32>
 8003116:	89ab      	ldrh	r3, [r5, #12]
 8003118:	059a      	lsls	r2, r3, #22
 800311a:	d402      	bmi.n	8003122 <_vfiprintf_r+0x32>
 800311c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800311e:	f7ff ff61 	bl	8002fe4 <__retarget_lock_acquire_recursive>
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	071b      	lsls	r3, r3, #28
 8003126:	d501      	bpl.n	800312c <_vfiprintf_r+0x3c>
 8003128:	692b      	ldr	r3, [r5, #16]
 800312a:	b9eb      	cbnz	r3, 8003168 <_vfiprintf_r+0x78>
 800312c:	4629      	mov	r1, r5
 800312e:	4630      	mov	r0, r6
 8003130:	f000 fb5a 	bl	80037e8 <__swsetup_r>
 8003134:	b1c0      	cbz	r0, 8003168 <_vfiprintf_r+0x78>
 8003136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003138:	07dc      	lsls	r4, r3, #31
 800313a:	d50e      	bpl.n	800315a <_vfiprintf_r+0x6a>
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	b01d      	add	sp, #116	; 0x74
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003146:	4b7b      	ldr	r3, [pc, #492]	; (8003334 <_vfiprintf_r+0x244>)
 8003148:	429d      	cmp	r5, r3
 800314a:	d101      	bne.n	8003150 <_vfiprintf_r+0x60>
 800314c:	68b5      	ldr	r5, [r6, #8]
 800314e:	e7df      	b.n	8003110 <_vfiprintf_r+0x20>
 8003150:	4b79      	ldr	r3, [pc, #484]	; (8003338 <_vfiprintf_r+0x248>)
 8003152:	429d      	cmp	r5, r3
 8003154:	bf08      	it	eq
 8003156:	68f5      	ldreq	r5, [r6, #12]
 8003158:	e7da      	b.n	8003110 <_vfiprintf_r+0x20>
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	0598      	lsls	r0, r3, #22
 800315e:	d4ed      	bmi.n	800313c <_vfiprintf_r+0x4c>
 8003160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003162:	f7ff ff40 	bl	8002fe6 <__retarget_lock_release_recursive>
 8003166:	e7e9      	b.n	800313c <_vfiprintf_r+0x4c>
 8003168:	2300      	movs	r3, #0
 800316a:	9309      	str	r3, [sp, #36]	; 0x24
 800316c:	2320      	movs	r3, #32
 800316e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003172:	f8cd 800c 	str.w	r8, [sp, #12]
 8003176:	2330      	movs	r3, #48	; 0x30
 8003178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800333c <_vfiprintf_r+0x24c>
 800317c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003180:	f04f 0901 	mov.w	r9, #1
 8003184:	4623      	mov	r3, r4
 8003186:	469a      	mov	sl, r3
 8003188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800318c:	b10a      	cbz	r2, 8003192 <_vfiprintf_r+0xa2>
 800318e:	2a25      	cmp	r2, #37	; 0x25
 8003190:	d1f9      	bne.n	8003186 <_vfiprintf_r+0x96>
 8003192:	ebba 0b04 	subs.w	fp, sl, r4
 8003196:	d00b      	beq.n	80031b0 <_vfiprintf_r+0xc0>
 8003198:	465b      	mov	r3, fp
 800319a:	4622      	mov	r2, r4
 800319c:	4629      	mov	r1, r5
 800319e:	4630      	mov	r0, r6
 80031a0:	f7ff ff93 	bl	80030ca <__sfputs_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	f000 80aa 	beq.w	80032fe <_vfiprintf_r+0x20e>
 80031aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031ac:	445a      	add	r2, fp
 80031ae:	9209      	str	r2, [sp, #36]	; 0x24
 80031b0:	f89a 3000 	ldrb.w	r3, [sl]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a2 	beq.w	80032fe <_vfiprintf_r+0x20e>
 80031ba:	2300      	movs	r3, #0
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031c4:	f10a 0a01 	add.w	sl, sl, #1
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	9307      	str	r3, [sp, #28]
 80031cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031d0:	931a      	str	r3, [sp, #104]	; 0x68
 80031d2:	4654      	mov	r4, sl
 80031d4:	2205      	movs	r2, #5
 80031d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031da:	4858      	ldr	r0, [pc, #352]	; (800333c <_vfiprintf_r+0x24c>)
 80031dc:	f7fd f820 	bl	8000220 <memchr>
 80031e0:	9a04      	ldr	r2, [sp, #16]
 80031e2:	b9d8      	cbnz	r0, 800321c <_vfiprintf_r+0x12c>
 80031e4:	06d1      	lsls	r1, r2, #27
 80031e6:	bf44      	itt	mi
 80031e8:	2320      	movmi	r3, #32
 80031ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ee:	0713      	lsls	r3, r2, #28
 80031f0:	bf44      	itt	mi
 80031f2:	232b      	movmi	r3, #43	; 0x2b
 80031f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031f8:	f89a 3000 	ldrb.w	r3, [sl]
 80031fc:	2b2a      	cmp	r3, #42	; 0x2a
 80031fe:	d015      	beq.n	800322c <_vfiprintf_r+0x13c>
 8003200:	9a07      	ldr	r2, [sp, #28]
 8003202:	4654      	mov	r4, sl
 8003204:	2000      	movs	r0, #0
 8003206:	f04f 0c0a 	mov.w	ip, #10
 800320a:	4621      	mov	r1, r4
 800320c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003210:	3b30      	subs	r3, #48	; 0x30
 8003212:	2b09      	cmp	r3, #9
 8003214:	d94e      	bls.n	80032b4 <_vfiprintf_r+0x1c4>
 8003216:	b1b0      	cbz	r0, 8003246 <_vfiprintf_r+0x156>
 8003218:	9207      	str	r2, [sp, #28]
 800321a:	e014      	b.n	8003246 <_vfiprintf_r+0x156>
 800321c:	eba0 0308 	sub.w	r3, r0, r8
 8003220:	fa09 f303 	lsl.w	r3, r9, r3
 8003224:	4313      	orrs	r3, r2
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	46a2      	mov	sl, r4
 800322a:	e7d2      	b.n	80031d2 <_vfiprintf_r+0xe2>
 800322c:	9b03      	ldr	r3, [sp, #12]
 800322e:	1d19      	adds	r1, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	9103      	str	r1, [sp, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfbb      	ittet	lt
 8003238:	425b      	neglt	r3, r3
 800323a:	f042 0202 	orrlt.w	r2, r2, #2
 800323e:	9307      	strge	r3, [sp, #28]
 8003240:	9307      	strlt	r3, [sp, #28]
 8003242:	bfb8      	it	lt
 8003244:	9204      	strlt	r2, [sp, #16]
 8003246:	7823      	ldrb	r3, [r4, #0]
 8003248:	2b2e      	cmp	r3, #46	; 0x2e
 800324a:	d10c      	bne.n	8003266 <_vfiprintf_r+0x176>
 800324c:	7863      	ldrb	r3, [r4, #1]
 800324e:	2b2a      	cmp	r3, #42	; 0x2a
 8003250:	d135      	bne.n	80032be <_vfiprintf_r+0x1ce>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9203      	str	r2, [sp, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfb8      	it	lt
 800325e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003262:	3402      	adds	r4, #2
 8003264:	9305      	str	r3, [sp, #20]
 8003266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800334c <_vfiprintf_r+0x25c>
 800326a:	7821      	ldrb	r1, [r4, #0]
 800326c:	2203      	movs	r2, #3
 800326e:	4650      	mov	r0, sl
 8003270:	f7fc ffd6 	bl	8000220 <memchr>
 8003274:	b140      	cbz	r0, 8003288 <_vfiprintf_r+0x198>
 8003276:	2340      	movs	r3, #64	; 0x40
 8003278:	eba0 000a 	sub.w	r0, r0, sl
 800327c:	fa03 f000 	lsl.w	r0, r3, r0
 8003280:	9b04      	ldr	r3, [sp, #16]
 8003282:	4303      	orrs	r3, r0
 8003284:	3401      	adds	r4, #1
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800328c:	482c      	ldr	r0, [pc, #176]	; (8003340 <_vfiprintf_r+0x250>)
 800328e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003292:	2206      	movs	r2, #6
 8003294:	f7fc ffc4 	bl	8000220 <memchr>
 8003298:	2800      	cmp	r0, #0
 800329a:	d03f      	beq.n	800331c <_vfiprintf_r+0x22c>
 800329c:	4b29      	ldr	r3, [pc, #164]	; (8003344 <_vfiprintf_r+0x254>)
 800329e:	bb1b      	cbnz	r3, 80032e8 <_vfiprintf_r+0x1f8>
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	3307      	adds	r3, #7
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	3308      	adds	r3, #8
 80032aa:	9303      	str	r3, [sp, #12]
 80032ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ae:	443b      	add	r3, r7
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	e767      	b.n	8003184 <_vfiprintf_r+0x94>
 80032b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80032b8:	460c      	mov	r4, r1
 80032ba:	2001      	movs	r0, #1
 80032bc:	e7a5      	b.n	800320a <_vfiprintf_r+0x11a>
 80032be:	2300      	movs	r3, #0
 80032c0:	3401      	adds	r4, #1
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f04f 0c0a 	mov.w	ip, #10
 80032ca:	4620      	mov	r0, r4
 80032cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032d0:	3a30      	subs	r2, #48	; 0x30
 80032d2:	2a09      	cmp	r2, #9
 80032d4:	d903      	bls.n	80032de <_vfiprintf_r+0x1ee>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0c5      	beq.n	8003266 <_vfiprintf_r+0x176>
 80032da:	9105      	str	r1, [sp, #20]
 80032dc:	e7c3      	b.n	8003266 <_vfiprintf_r+0x176>
 80032de:	fb0c 2101 	mla	r1, ip, r1, r2
 80032e2:	4604      	mov	r4, r0
 80032e4:	2301      	movs	r3, #1
 80032e6:	e7f0      	b.n	80032ca <_vfiprintf_r+0x1da>
 80032e8:	ab03      	add	r3, sp, #12
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	462a      	mov	r2, r5
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <_vfiprintf_r+0x258>)
 80032f0:	a904      	add	r1, sp, #16
 80032f2:	4630      	mov	r0, r6
 80032f4:	f3af 8000 	nop.w
 80032f8:	4607      	mov	r7, r0
 80032fa:	1c78      	adds	r0, r7, #1
 80032fc:	d1d6      	bne.n	80032ac <_vfiprintf_r+0x1bc>
 80032fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003300:	07d9      	lsls	r1, r3, #31
 8003302:	d405      	bmi.n	8003310 <_vfiprintf_r+0x220>
 8003304:	89ab      	ldrh	r3, [r5, #12]
 8003306:	059a      	lsls	r2, r3, #22
 8003308:	d402      	bmi.n	8003310 <_vfiprintf_r+0x220>
 800330a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800330c:	f7ff fe6b 	bl	8002fe6 <__retarget_lock_release_recursive>
 8003310:	89ab      	ldrh	r3, [r5, #12]
 8003312:	065b      	lsls	r3, r3, #25
 8003314:	f53f af12 	bmi.w	800313c <_vfiprintf_r+0x4c>
 8003318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800331a:	e711      	b.n	8003140 <_vfiprintf_r+0x50>
 800331c:	ab03      	add	r3, sp, #12
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	462a      	mov	r2, r5
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <_vfiprintf_r+0x258>)
 8003324:	a904      	add	r1, sp, #16
 8003326:	4630      	mov	r0, r6
 8003328:	f000 f880 	bl	800342c <_printf_i>
 800332c:	e7e4      	b.n	80032f8 <_vfiprintf_r+0x208>
 800332e:	bf00      	nop
 8003330:	08003d00 	.word	0x08003d00
 8003334:	08003d20 	.word	0x08003d20
 8003338:	08003ce0 	.word	0x08003ce0
 800333c:	08003d40 	.word	0x08003d40
 8003340:	08003d4a 	.word	0x08003d4a
 8003344:	00000000 	.word	0x00000000
 8003348:	080030cb 	.word	0x080030cb
 800334c:	08003d46 	.word	0x08003d46

08003350 <_printf_common>:
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	4616      	mov	r6, r2
 8003356:	4699      	mov	r9, r3
 8003358:	688a      	ldr	r2, [r1, #8]
 800335a:	690b      	ldr	r3, [r1, #16]
 800335c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003360:	4293      	cmp	r3, r2
 8003362:	bfb8      	it	lt
 8003364:	4613      	movlt	r3, r2
 8003366:	6033      	str	r3, [r6, #0]
 8003368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800336c:	4607      	mov	r7, r0
 800336e:	460c      	mov	r4, r1
 8003370:	b10a      	cbz	r2, 8003376 <_printf_common+0x26>
 8003372:	3301      	adds	r3, #1
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	0699      	lsls	r1, r3, #26
 800337a:	bf42      	ittt	mi
 800337c:	6833      	ldrmi	r3, [r6, #0]
 800337e:	3302      	addmi	r3, #2
 8003380:	6033      	strmi	r3, [r6, #0]
 8003382:	6825      	ldr	r5, [r4, #0]
 8003384:	f015 0506 	ands.w	r5, r5, #6
 8003388:	d106      	bne.n	8003398 <_printf_common+0x48>
 800338a:	f104 0a19 	add.w	sl, r4, #25
 800338e:	68e3      	ldr	r3, [r4, #12]
 8003390:	6832      	ldr	r2, [r6, #0]
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	42ab      	cmp	r3, r5
 8003396:	dc26      	bgt.n	80033e6 <_printf_common+0x96>
 8003398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800339c:	1e13      	subs	r3, r2, #0
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	bf18      	it	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	0692      	lsls	r2, r2, #26
 80033a6:	d42b      	bmi.n	8003400 <_printf_common+0xb0>
 80033a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ac:	4649      	mov	r1, r9
 80033ae:	4638      	mov	r0, r7
 80033b0:	47c0      	blx	r8
 80033b2:	3001      	adds	r0, #1
 80033b4:	d01e      	beq.n	80033f4 <_printf_common+0xa4>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	68e5      	ldr	r5, [r4, #12]
 80033ba:	6832      	ldr	r2, [r6, #0]
 80033bc:	f003 0306 	and.w	r3, r3, #6
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	bf08      	it	eq
 80033c4:	1aad      	subeq	r5, r5, r2
 80033c6:	68a3      	ldr	r3, [r4, #8]
 80033c8:	6922      	ldr	r2, [r4, #16]
 80033ca:	bf0c      	ite	eq
 80033cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d0:	2500      	movne	r5, #0
 80033d2:	4293      	cmp	r3, r2
 80033d4:	bfc4      	itt	gt
 80033d6:	1a9b      	subgt	r3, r3, r2
 80033d8:	18ed      	addgt	r5, r5, r3
 80033da:	2600      	movs	r6, #0
 80033dc:	341a      	adds	r4, #26
 80033de:	42b5      	cmp	r5, r6
 80033e0:	d11a      	bne.n	8003418 <_printf_common+0xc8>
 80033e2:	2000      	movs	r0, #0
 80033e4:	e008      	b.n	80033f8 <_printf_common+0xa8>
 80033e6:	2301      	movs	r3, #1
 80033e8:	4652      	mov	r2, sl
 80033ea:	4649      	mov	r1, r9
 80033ec:	4638      	mov	r0, r7
 80033ee:	47c0      	blx	r8
 80033f0:	3001      	adds	r0, #1
 80033f2:	d103      	bne.n	80033fc <_printf_common+0xac>
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fc:	3501      	adds	r5, #1
 80033fe:	e7c6      	b.n	800338e <_printf_common+0x3e>
 8003400:	18e1      	adds	r1, r4, r3
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	2030      	movs	r0, #48	; 0x30
 8003406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800340a:	4422      	add	r2, r4
 800340c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003414:	3302      	adds	r3, #2
 8003416:	e7c7      	b.n	80033a8 <_printf_common+0x58>
 8003418:	2301      	movs	r3, #1
 800341a:	4622      	mov	r2, r4
 800341c:	4649      	mov	r1, r9
 800341e:	4638      	mov	r0, r7
 8003420:	47c0      	blx	r8
 8003422:	3001      	adds	r0, #1
 8003424:	d0e6      	beq.n	80033f4 <_printf_common+0xa4>
 8003426:	3601      	adds	r6, #1
 8003428:	e7d9      	b.n	80033de <_printf_common+0x8e>
	...

0800342c <_printf_i>:
 800342c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	460c      	mov	r4, r1
 8003432:	4691      	mov	r9, r2
 8003434:	7e27      	ldrb	r7, [r4, #24]
 8003436:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003438:	2f78      	cmp	r7, #120	; 0x78
 800343a:	4680      	mov	r8, r0
 800343c:	469a      	mov	sl, r3
 800343e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003442:	d807      	bhi.n	8003454 <_printf_i+0x28>
 8003444:	2f62      	cmp	r7, #98	; 0x62
 8003446:	d80a      	bhi.n	800345e <_printf_i+0x32>
 8003448:	2f00      	cmp	r7, #0
 800344a:	f000 80d8 	beq.w	80035fe <_printf_i+0x1d2>
 800344e:	2f58      	cmp	r7, #88	; 0x58
 8003450:	f000 80a3 	beq.w	800359a <_printf_i+0x16e>
 8003454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800345c:	e03a      	b.n	80034d4 <_printf_i+0xa8>
 800345e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003462:	2b15      	cmp	r3, #21
 8003464:	d8f6      	bhi.n	8003454 <_printf_i+0x28>
 8003466:	a001      	add	r0, pc, #4	; (adr r0, 800346c <_printf_i+0x40>)
 8003468:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800346c:	080034c5 	.word	0x080034c5
 8003470:	080034d9 	.word	0x080034d9
 8003474:	08003455 	.word	0x08003455
 8003478:	08003455 	.word	0x08003455
 800347c:	08003455 	.word	0x08003455
 8003480:	08003455 	.word	0x08003455
 8003484:	080034d9 	.word	0x080034d9
 8003488:	08003455 	.word	0x08003455
 800348c:	08003455 	.word	0x08003455
 8003490:	08003455 	.word	0x08003455
 8003494:	08003455 	.word	0x08003455
 8003498:	080035e5 	.word	0x080035e5
 800349c:	08003509 	.word	0x08003509
 80034a0:	080035c7 	.word	0x080035c7
 80034a4:	08003455 	.word	0x08003455
 80034a8:	08003455 	.word	0x08003455
 80034ac:	08003607 	.word	0x08003607
 80034b0:	08003455 	.word	0x08003455
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003455 	.word	0x08003455
 80034bc:	08003455 	.word	0x08003455
 80034c0:	080035cf 	.word	0x080035cf
 80034c4:	680b      	ldr	r3, [r1, #0]
 80034c6:	1d1a      	adds	r2, r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	600a      	str	r2, [r1, #0]
 80034cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0a3      	b.n	8003620 <_printf_i+0x1f4>
 80034d8:	6825      	ldr	r5, [r4, #0]
 80034da:	6808      	ldr	r0, [r1, #0]
 80034dc:	062e      	lsls	r6, r5, #24
 80034de:	f100 0304 	add.w	r3, r0, #4
 80034e2:	d50a      	bpl.n	80034fa <_printf_i+0xce>
 80034e4:	6805      	ldr	r5, [r0, #0]
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	da03      	bge.n	80034f4 <_printf_i+0xc8>
 80034ec:	232d      	movs	r3, #45	; 0x2d
 80034ee:	426d      	negs	r5, r5
 80034f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f4:	485e      	ldr	r0, [pc, #376]	; (8003670 <_printf_i+0x244>)
 80034f6:	230a      	movs	r3, #10
 80034f8:	e019      	b.n	800352e <_printf_i+0x102>
 80034fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034fe:	6805      	ldr	r5, [r0, #0]
 8003500:	600b      	str	r3, [r1, #0]
 8003502:	bf18      	it	ne
 8003504:	b22d      	sxthne	r5, r5
 8003506:	e7ef      	b.n	80034e8 <_printf_i+0xbc>
 8003508:	680b      	ldr	r3, [r1, #0]
 800350a:	6825      	ldr	r5, [r4, #0]
 800350c:	1d18      	adds	r0, r3, #4
 800350e:	6008      	str	r0, [r1, #0]
 8003510:	0628      	lsls	r0, r5, #24
 8003512:	d501      	bpl.n	8003518 <_printf_i+0xec>
 8003514:	681d      	ldr	r5, [r3, #0]
 8003516:	e002      	b.n	800351e <_printf_i+0xf2>
 8003518:	0669      	lsls	r1, r5, #25
 800351a:	d5fb      	bpl.n	8003514 <_printf_i+0xe8>
 800351c:	881d      	ldrh	r5, [r3, #0]
 800351e:	4854      	ldr	r0, [pc, #336]	; (8003670 <_printf_i+0x244>)
 8003520:	2f6f      	cmp	r7, #111	; 0x6f
 8003522:	bf0c      	ite	eq
 8003524:	2308      	moveq	r3, #8
 8003526:	230a      	movne	r3, #10
 8003528:	2100      	movs	r1, #0
 800352a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800352e:	6866      	ldr	r6, [r4, #4]
 8003530:	60a6      	str	r6, [r4, #8]
 8003532:	2e00      	cmp	r6, #0
 8003534:	bfa2      	ittt	ge
 8003536:	6821      	ldrge	r1, [r4, #0]
 8003538:	f021 0104 	bicge.w	r1, r1, #4
 800353c:	6021      	strge	r1, [r4, #0]
 800353e:	b90d      	cbnz	r5, 8003544 <_printf_i+0x118>
 8003540:	2e00      	cmp	r6, #0
 8003542:	d04d      	beq.n	80035e0 <_printf_i+0x1b4>
 8003544:	4616      	mov	r6, r2
 8003546:	fbb5 f1f3 	udiv	r1, r5, r3
 800354a:	fb03 5711 	mls	r7, r3, r1, r5
 800354e:	5dc7      	ldrb	r7, [r0, r7]
 8003550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003554:	462f      	mov	r7, r5
 8003556:	42bb      	cmp	r3, r7
 8003558:	460d      	mov	r5, r1
 800355a:	d9f4      	bls.n	8003546 <_printf_i+0x11a>
 800355c:	2b08      	cmp	r3, #8
 800355e:	d10b      	bne.n	8003578 <_printf_i+0x14c>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	07df      	lsls	r7, r3, #31
 8003564:	d508      	bpl.n	8003578 <_printf_i+0x14c>
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	6861      	ldr	r1, [r4, #4]
 800356a:	4299      	cmp	r1, r3
 800356c:	bfde      	ittt	le
 800356e:	2330      	movle	r3, #48	; 0x30
 8003570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003578:	1b92      	subs	r2, r2, r6
 800357a:	6122      	str	r2, [r4, #16]
 800357c:	f8cd a000 	str.w	sl, [sp]
 8003580:	464b      	mov	r3, r9
 8003582:	aa03      	add	r2, sp, #12
 8003584:	4621      	mov	r1, r4
 8003586:	4640      	mov	r0, r8
 8003588:	f7ff fee2 	bl	8003350 <_printf_common>
 800358c:	3001      	adds	r0, #1
 800358e:	d14c      	bne.n	800362a <_printf_i+0x1fe>
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	b004      	add	sp, #16
 8003596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359a:	4835      	ldr	r0, [pc, #212]	; (8003670 <_printf_i+0x244>)
 800359c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	680e      	ldr	r6, [r1, #0]
 80035a4:	061f      	lsls	r7, r3, #24
 80035a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80035aa:	600e      	str	r6, [r1, #0]
 80035ac:	d514      	bpl.n	80035d8 <_printf_i+0x1ac>
 80035ae:	07d9      	lsls	r1, r3, #31
 80035b0:	bf44      	itt	mi
 80035b2:	f043 0320 	orrmi.w	r3, r3, #32
 80035b6:	6023      	strmi	r3, [r4, #0]
 80035b8:	b91d      	cbnz	r5, 80035c2 <_printf_i+0x196>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f023 0320 	bic.w	r3, r3, #32
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	2310      	movs	r3, #16
 80035c4:	e7b0      	b.n	8003528 <_printf_i+0xfc>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	2378      	movs	r3, #120	; 0x78
 80035d0:	4828      	ldr	r0, [pc, #160]	; (8003674 <_printf_i+0x248>)
 80035d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035d6:	e7e3      	b.n	80035a0 <_printf_i+0x174>
 80035d8:	065e      	lsls	r6, r3, #25
 80035da:	bf48      	it	mi
 80035dc:	b2ad      	uxthmi	r5, r5
 80035de:	e7e6      	b.n	80035ae <_printf_i+0x182>
 80035e0:	4616      	mov	r6, r2
 80035e2:	e7bb      	b.n	800355c <_printf_i+0x130>
 80035e4:	680b      	ldr	r3, [r1, #0]
 80035e6:	6826      	ldr	r6, [r4, #0]
 80035e8:	6960      	ldr	r0, [r4, #20]
 80035ea:	1d1d      	adds	r5, r3, #4
 80035ec:	600d      	str	r5, [r1, #0]
 80035ee:	0635      	lsls	r5, r6, #24
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	d501      	bpl.n	80035f8 <_printf_i+0x1cc>
 80035f4:	6018      	str	r0, [r3, #0]
 80035f6:	e002      	b.n	80035fe <_printf_i+0x1d2>
 80035f8:	0671      	lsls	r1, r6, #25
 80035fa:	d5fb      	bpl.n	80035f4 <_printf_i+0x1c8>
 80035fc:	8018      	strh	r0, [r3, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	6123      	str	r3, [r4, #16]
 8003602:	4616      	mov	r6, r2
 8003604:	e7ba      	b.n	800357c <_printf_i+0x150>
 8003606:	680b      	ldr	r3, [r1, #0]
 8003608:	1d1a      	adds	r2, r3, #4
 800360a:	600a      	str	r2, [r1, #0]
 800360c:	681e      	ldr	r6, [r3, #0]
 800360e:	6862      	ldr	r2, [r4, #4]
 8003610:	2100      	movs	r1, #0
 8003612:	4630      	mov	r0, r6
 8003614:	f7fc fe04 	bl	8000220 <memchr>
 8003618:	b108      	cbz	r0, 800361e <_printf_i+0x1f2>
 800361a:	1b80      	subs	r0, r0, r6
 800361c:	6060      	str	r0, [r4, #4]
 800361e:	6863      	ldr	r3, [r4, #4]
 8003620:	6123      	str	r3, [r4, #16]
 8003622:	2300      	movs	r3, #0
 8003624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003628:	e7a8      	b.n	800357c <_printf_i+0x150>
 800362a:	6923      	ldr	r3, [r4, #16]
 800362c:	4632      	mov	r2, r6
 800362e:	4649      	mov	r1, r9
 8003630:	4640      	mov	r0, r8
 8003632:	47d0      	blx	sl
 8003634:	3001      	adds	r0, #1
 8003636:	d0ab      	beq.n	8003590 <_printf_i+0x164>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	079b      	lsls	r3, r3, #30
 800363c:	d413      	bmi.n	8003666 <_printf_i+0x23a>
 800363e:	68e0      	ldr	r0, [r4, #12]
 8003640:	9b03      	ldr	r3, [sp, #12]
 8003642:	4298      	cmp	r0, r3
 8003644:	bfb8      	it	lt
 8003646:	4618      	movlt	r0, r3
 8003648:	e7a4      	b.n	8003594 <_printf_i+0x168>
 800364a:	2301      	movs	r3, #1
 800364c:	4632      	mov	r2, r6
 800364e:	4649      	mov	r1, r9
 8003650:	4640      	mov	r0, r8
 8003652:	47d0      	blx	sl
 8003654:	3001      	adds	r0, #1
 8003656:	d09b      	beq.n	8003590 <_printf_i+0x164>
 8003658:	3501      	adds	r5, #1
 800365a:	68e3      	ldr	r3, [r4, #12]
 800365c:	9903      	ldr	r1, [sp, #12]
 800365e:	1a5b      	subs	r3, r3, r1
 8003660:	42ab      	cmp	r3, r5
 8003662:	dcf2      	bgt.n	800364a <_printf_i+0x21e>
 8003664:	e7eb      	b.n	800363e <_printf_i+0x212>
 8003666:	2500      	movs	r5, #0
 8003668:	f104 0619 	add.w	r6, r4, #25
 800366c:	e7f5      	b.n	800365a <_printf_i+0x22e>
 800366e:	bf00      	nop
 8003670:	08003d51 	.word	0x08003d51
 8003674:	08003d62 	.word	0x08003d62

08003678 <_sbrk_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d06      	ldr	r5, [pc, #24]	; (8003694 <_sbrk_r+0x1c>)
 800367c:	2300      	movs	r3, #0
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	f7fd f9f2 	bl	8000a6c <_sbrk>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_sbrk_r+0x1a>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	b103      	cbz	r3, 8003692 <_sbrk_r+0x1a>
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	20000138 	.word	0x20000138

08003698 <__sread>:
 8003698:	b510      	push	{r4, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	f000 fab4 	bl	8003c0c <_read_r>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	bfab      	itete	ge
 80036a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036aa:	89a3      	ldrhlt	r3, [r4, #12]
 80036ac:	181b      	addge	r3, r3, r0
 80036ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036b2:	bfac      	ite	ge
 80036b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80036b6:	81a3      	strhlt	r3, [r4, #12]
 80036b8:	bd10      	pop	{r4, pc}

080036ba <__swrite>:
 80036ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036be:	461f      	mov	r7, r3
 80036c0:	898b      	ldrh	r3, [r1, #12]
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	4605      	mov	r5, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	4616      	mov	r6, r2
 80036ca:	d505      	bpl.n	80036d8 <__swrite+0x1e>
 80036cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d0:	2302      	movs	r3, #2
 80036d2:	2200      	movs	r2, #0
 80036d4:	f000 f9c8 	bl	8003a68 <_lseek_r>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	4632      	mov	r2, r6
 80036e6:	463b      	mov	r3, r7
 80036e8:	4628      	mov	r0, r5
 80036ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ee:	f000 b869 	b.w	80037c4 <_write_r>

080036f2 <__sseek>:
 80036f2:	b510      	push	{r4, lr}
 80036f4:	460c      	mov	r4, r1
 80036f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fa:	f000 f9b5 	bl	8003a68 <_lseek_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	bf15      	itete	ne
 8003704:	6560      	strne	r0, [r4, #84]	; 0x54
 8003706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800370a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800370e:	81a3      	strheq	r3, [r4, #12]
 8003710:	bf18      	it	ne
 8003712:	81a3      	strhne	r3, [r4, #12]
 8003714:	bd10      	pop	{r4, pc}

08003716 <__sclose>:
 8003716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371a:	f000 b8d3 	b.w	80038c4 <_close_r>
	...

08003720 <__swbuf_r>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	460e      	mov	r6, r1
 8003724:	4614      	mov	r4, r2
 8003726:	4605      	mov	r5, r0
 8003728:	b118      	cbz	r0, 8003732 <__swbuf_r+0x12>
 800372a:	6983      	ldr	r3, [r0, #24]
 800372c:	b90b      	cbnz	r3, 8003732 <__swbuf_r+0x12>
 800372e:	f7ff fbbb 	bl	8002ea8 <__sinit>
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <__swbuf_r+0x98>)
 8003734:	429c      	cmp	r4, r3
 8003736:	d12b      	bne.n	8003790 <__swbuf_r+0x70>
 8003738:	686c      	ldr	r4, [r5, #4]
 800373a:	69a3      	ldr	r3, [r4, #24]
 800373c:	60a3      	str	r3, [r4, #8]
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	071a      	lsls	r2, r3, #28
 8003742:	d52f      	bpl.n	80037a4 <__swbuf_r+0x84>
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	b36b      	cbz	r3, 80037a4 <__swbuf_r+0x84>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	1ac0      	subs	r0, r0, r3
 800374e:	6963      	ldr	r3, [r4, #20]
 8003750:	b2f6      	uxtb	r6, r6
 8003752:	4283      	cmp	r3, r0
 8003754:	4637      	mov	r7, r6
 8003756:	dc04      	bgt.n	8003762 <__swbuf_r+0x42>
 8003758:	4621      	mov	r1, r4
 800375a:	4628      	mov	r0, r5
 800375c:	f000 f948 	bl	80039f0 <_fflush_r>
 8003760:	bb30      	cbnz	r0, 80037b0 <__swbuf_r+0x90>
 8003762:	68a3      	ldr	r3, [r4, #8]
 8003764:	3b01      	subs	r3, #1
 8003766:	60a3      	str	r3, [r4, #8]
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	6022      	str	r2, [r4, #0]
 800376e:	701e      	strb	r6, [r3, #0]
 8003770:	6963      	ldr	r3, [r4, #20]
 8003772:	3001      	adds	r0, #1
 8003774:	4283      	cmp	r3, r0
 8003776:	d004      	beq.n	8003782 <__swbuf_r+0x62>
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d506      	bpl.n	800378c <__swbuf_r+0x6c>
 800377e:	2e0a      	cmp	r6, #10
 8003780:	d104      	bne.n	800378c <__swbuf_r+0x6c>
 8003782:	4621      	mov	r1, r4
 8003784:	4628      	mov	r0, r5
 8003786:	f000 f933 	bl	80039f0 <_fflush_r>
 800378a:	b988      	cbnz	r0, 80037b0 <__swbuf_r+0x90>
 800378c:	4638      	mov	r0, r7
 800378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <__swbuf_r+0x9c>)
 8003792:	429c      	cmp	r4, r3
 8003794:	d101      	bne.n	800379a <__swbuf_r+0x7a>
 8003796:	68ac      	ldr	r4, [r5, #8]
 8003798:	e7cf      	b.n	800373a <__swbuf_r+0x1a>
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <__swbuf_r+0xa0>)
 800379c:	429c      	cmp	r4, r3
 800379e:	bf08      	it	eq
 80037a0:	68ec      	ldreq	r4, [r5, #12]
 80037a2:	e7ca      	b.n	800373a <__swbuf_r+0x1a>
 80037a4:	4621      	mov	r1, r4
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 f81e 	bl	80037e8 <__swsetup_r>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d0cb      	beq.n	8003748 <__swbuf_r+0x28>
 80037b0:	f04f 37ff 	mov.w	r7, #4294967295
 80037b4:	e7ea      	b.n	800378c <__swbuf_r+0x6c>
 80037b6:	bf00      	nop
 80037b8:	08003d00 	.word	0x08003d00
 80037bc:	08003d20 	.word	0x08003d20
 80037c0:	08003ce0 	.word	0x08003ce0

080037c4 <_write_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d07      	ldr	r5, [pc, #28]	; (80037e4 <_write_r+0x20>)
 80037c8:	4604      	mov	r4, r0
 80037ca:	4608      	mov	r0, r1
 80037cc:	4611      	mov	r1, r2
 80037ce:	2200      	movs	r2, #0
 80037d0:	602a      	str	r2, [r5, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7fd f8fa 	bl	80009cc <_write>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_write_r+0x1e>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_write_r+0x1e>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20000138 	.word	0x20000138

080037e8 <__swsetup_r>:
 80037e8:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <__swsetup_r+0xcc>)
 80037ea:	b570      	push	{r4, r5, r6, lr}
 80037ec:	681d      	ldr	r5, [r3, #0]
 80037ee:	4606      	mov	r6, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	b125      	cbz	r5, 80037fe <__swsetup_r+0x16>
 80037f4:	69ab      	ldr	r3, [r5, #24]
 80037f6:	b913      	cbnz	r3, 80037fe <__swsetup_r+0x16>
 80037f8:	4628      	mov	r0, r5
 80037fa:	f7ff fb55 	bl	8002ea8 <__sinit>
 80037fe:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <__swsetup_r+0xd0>)
 8003800:	429c      	cmp	r4, r3
 8003802:	d10f      	bne.n	8003824 <__swsetup_r+0x3c>
 8003804:	686c      	ldr	r4, [r5, #4]
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800380c:	0719      	lsls	r1, r3, #28
 800380e:	d42c      	bmi.n	800386a <__swsetup_r+0x82>
 8003810:	06dd      	lsls	r5, r3, #27
 8003812:	d411      	bmi.n	8003838 <__swsetup_r+0x50>
 8003814:	2309      	movs	r3, #9
 8003816:	6033      	str	r3, [r6, #0]
 8003818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	f04f 30ff 	mov.w	r0, #4294967295
 8003822:	e03e      	b.n	80038a2 <__swsetup_r+0xba>
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <__swsetup_r+0xd4>)
 8003826:	429c      	cmp	r4, r3
 8003828:	d101      	bne.n	800382e <__swsetup_r+0x46>
 800382a:	68ac      	ldr	r4, [r5, #8]
 800382c:	e7eb      	b.n	8003806 <__swsetup_r+0x1e>
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <__swsetup_r+0xd8>)
 8003830:	429c      	cmp	r4, r3
 8003832:	bf08      	it	eq
 8003834:	68ec      	ldreq	r4, [r5, #12]
 8003836:	e7e6      	b.n	8003806 <__swsetup_r+0x1e>
 8003838:	0758      	lsls	r0, r3, #29
 800383a:	d512      	bpl.n	8003862 <__swsetup_r+0x7a>
 800383c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800383e:	b141      	cbz	r1, 8003852 <__swsetup_r+0x6a>
 8003840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003844:	4299      	cmp	r1, r3
 8003846:	d002      	beq.n	800384e <__swsetup_r+0x66>
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f98f 	bl	8003b6c <_free_r>
 800384e:	2300      	movs	r3, #0
 8003850:	6363      	str	r3, [r4, #52]	; 0x34
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	2300      	movs	r3, #0
 800385c:	6063      	str	r3, [r4, #4]
 800385e:	6923      	ldr	r3, [r4, #16]
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	81a3      	strh	r3, [r4, #12]
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	b94b      	cbnz	r3, 8003882 <__swsetup_r+0x9a>
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003878:	d003      	beq.n	8003882 <__swsetup_r+0x9a>
 800387a:	4621      	mov	r1, r4
 800387c:	4630      	mov	r0, r6
 800387e:	f000 f929 	bl	8003ad4 <__smakebuf_r>
 8003882:	89a0      	ldrh	r0, [r4, #12]
 8003884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003888:	f010 0301 	ands.w	r3, r0, #1
 800388c:	d00a      	beq.n	80038a4 <__swsetup_r+0xbc>
 800388e:	2300      	movs	r3, #0
 8003890:	60a3      	str	r3, [r4, #8]
 8003892:	6963      	ldr	r3, [r4, #20]
 8003894:	425b      	negs	r3, r3
 8003896:	61a3      	str	r3, [r4, #24]
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	b943      	cbnz	r3, 80038ae <__swsetup_r+0xc6>
 800389c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038a0:	d1ba      	bne.n	8003818 <__swsetup_r+0x30>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	0781      	lsls	r1, r0, #30
 80038a6:	bf58      	it	pl
 80038a8:	6963      	ldrpl	r3, [r4, #20]
 80038aa:	60a3      	str	r3, [r4, #8]
 80038ac:	e7f4      	b.n	8003898 <__swsetup_r+0xb0>
 80038ae:	2000      	movs	r0, #0
 80038b0:	e7f7      	b.n	80038a2 <__swsetup_r+0xba>
 80038b2:	bf00      	nop
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	08003d00 	.word	0x08003d00
 80038bc:	08003d20 	.word	0x08003d20
 80038c0:	08003ce0 	.word	0x08003ce0

080038c4 <_close_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4d06      	ldr	r5, [pc, #24]	; (80038e0 <_close_r+0x1c>)
 80038c8:	2300      	movs	r3, #0
 80038ca:	4604      	mov	r4, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	602b      	str	r3, [r5, #0]
 80038d0:	f7fd f898 	bl	8000a04 <_close>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_close_r+0x1a>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_close_r+0x1a>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000138 	.word	0x20000138

080038e4 <__sflush_r>:
 80038e4:	898a      	ldrh	r2, [r1, #12]
 80038e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ea:	4605      	mov	r5, r0
 80038ec:	0710      	lsls	r0, r2, #28
 80038ee:	460c      	mov	r4, r1
 80038f0:	d458      	bmi.n	80039a4 <__sflush_r+0xc0>
 80038f2:	684b      	ldr	r3, [r1, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	dc05      	bgt.n	8003904 <__sflush_r+0x20>
 80038f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	dc02      	bgt.n	8003904 <__sflush_r+0x20>
 80038fe:	2000      	movs	r0, #0
 8003900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003906:	2e00      	cmp	r6, #0
 8003908:	d0f9      	beq.n	80038fe <__sflush_r+0x1a>
 800390a:	2300      	movs	r3, #0
 800390c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003910:	682f      	ldr	r7, [r5, #0]
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	d032      	beq.n	800397c <__sflush_r+0x98>
 8003916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	075a      	lsls	r2, r3, #29
 800391c:	d505      	bpl.n	800392a <__sflush_r+0x46>
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	1ac0      	subs	r0, r0, r3
 8003922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003924:	b10b      	cbz	r3, 800392a <__sflush_r+0x46>
 8003926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003928:	1ac0      	subs	r0, r0, r3
 800392a:	2300      	movs	r3, #0
 800392c:	4602      	mov	r2, r0
 800392e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003930:	6a21      	ldr	r1, [r4, #32]
 8003932:	4628      	mov	r0, r5
 8003934:	47b0      	blx	r6
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	d106      	bne.n	800394a <__sflush_r+0x66>
 800393c:	6829      	ldr	r1, [r5, #0]
 800393e:	291d      	cmp	r1, #29
 8003940:	d82c      	bhi.n	800399c <__sflush_r+0xb8>
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <__sflush_r+0x108>)
 8003944:	40ca      	lsrs	r2, r1
 8003946:	07d6      	lsls	r6, r2, #31
 8003948:	d528      	bpl.n	800399c <__sflush_r+0xb8>
 800394a:	2200      	movs	r2, #0
 800394c:	6062      	str	r2, [r4, #4]
 800394e:	04d9      	lsls	r1, r3, #19
 8003950:	6922      	ldr	r2, [r4, #16]
 8003952:	6022      	str	r2, [r4, #0]
 8003954:	d504      	bpl.n	8003960 <__sflush_r+0x7c>
 8003956:	1c42      	adds	r2, r0, #1
 8003958:	d101      	bne.n	800395e <__sflush_r+0x7a>
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	b903      	cbnz	r3, 8003960 <__sflush_r+0x7c>
 800395e:	6560      	str	r0, [r4, #84]	; 0x54
 8003960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003962:	602f      	str	r7, [r5, #0]
 8003964:	2900      	cmp	r1, #0
 8003966:	d0ca      	beq.n	80038fe <__sflush_r+0x1a>
 8003968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800396c:	4299      	cmp	r1, r3
 800396e:	d002      	beq.n	8003976 <__sflush_r+0x92>
 8003970:	4628      	mov	r0, r5
 8003972:	f000 f8fb 	bl	8003b6c <_free_r>
 8003976:	2000      	movs	r0, #0
 8003978:	6360      	str	r0, [r4, #52]	; 0x34
 800397a:	e7c1      	b.n	8003900 <__sflush_r+0x1c>
 800397c:	6a21      	ldr	r1, [r4, #32]
 800397e:	2301      	movs	r3, #1
 8003980:	4628      	mov	r0, r5
 8003982:	47b0      	blx	r6
 8003984:	1c41      	adds	r1, r0, #1
 8003986:	d1c7      	bne.n	8003918 <__sflush_r+0x34>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0c4      	beq.n	8003918 <__sflush_r+0x34>
 800398e:	2b1d      	cmp	r3, #29
 8003990:	d001      	beq.n	8003996 <__sflush_r+0xb2>
 8003992:	2b16      	cmp	r3, #22
 8003994:	d101      	bne.n	800399a <__sflush_r+0xb6>
 8003996:	602f      	str	r7, [r5, #0]
 8003998:	e7b1      	b.n	80038fe <__sflush_r+0x1a>
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	e7ad      	b.n	8003900 <__sflush_r+0x1c>
 80039a4:	690f      	ldr	r7, [r1, #16]
 80039a6:	2f00      	cmp	r7, #0
 80039a8:	d0a9      	beq.n	80038fe <__sflush_r+0x1a>
 80039aa:	0793      	lsls	r3, r2, #30
 80039ac:	680e      	ldr	r6, [r1, #0]
 80039ae:	bf08      	it	eq
 80039b0:	694b      	ldreq	r3, [r1, #20]
 80039b2:	600f      	str	r7, [r1, #0]
 80039b4:	bf18      	it	ne
 80039b6:	2300      	movne	r3, #0
 80039b8:	eba6 0807 	sub.w	r8, r6, r7
 80039bc:	608b      	str	r3, [r1, #8]
 80039be:	f1b8 0f00 	cmp.w	r8, #0
 80039c2:	dd9c      	ble.n	80038fe <__sflush_r+0x1a>
 80039c4:	6a21      	ldr	r1, [r4, #32]
 80039c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039c8:	4643      	mov	r3, r8
 80039ca:	463a      	mov	r2, r7
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b0      	blx	r6
 80039d0:	2800      	cmp	r0, #0
 80039d2:	dc06      	bgt.n	80039e2 <__sflush_r+0xfe>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e78e      	b.n	8003900 <__sflush_r+0x1c>
 80039e2:	4407      	add	r7, r0
 80039e4:	eba8 0800 	sub.w	r8, r8, r0
 80039e8:	e7e9      	b.n	80039be <__sflush_r+0xda>
 80039ea:	bf00      	nop
 80039ec:	20400001 	.word	0x20400001

080039f0 <_fflush_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	690b      	ldr	r3, [r1, #16]
 80039f4:	4605      	mov	r5, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	b913      	cbnz	r3, 8003a00 <_fflush_r+0x10>
 80039fa:	2500      	movs	r5, #0
 80039fc:	4628      	mov	r0, r5
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	b118      	cbz	r0, 8003a0a <_fflush_r+0x1a>
 8003a02:	6983      	ldr	r3, [r0, #24]
 8003a04:	b90b      	cbnz	r3, 8003a0a <_fflush_r+0x1a>
 8003a06:	f7ff fa4f 	bl	8002ea8 <__sinit>
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <_fflush_r+0x6c>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d11b      	bne.n	8003a48 <_fflush_r+0x58>
 8003a10:	686c      	ldr	r4, [r5, #4]
 8003a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ef      	beq.n	80039fa <_fflush_r+0xa>
 8003a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a1c:	07d0      	lsls	r0, r2, #31
 8003a1e:	d404      	bmi.n	8003a2a <_fflush_r+0x3a>
 8003a20:	0599      	lsls	r1, r3, #22
 8003a22:	d402      	bmi.n	8003a2a <_fflush_r+0x3a>
 8003a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a26:	f7ff fadd 	bl	8002fe4 <__retarget_lock_acquire_recursive>
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	f7ff ff59 	bl	80038e4 <__sflush_r>
 8003a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a34:	07da      	lsls	r2, r3, #31
 8003a36:	4605      	mov	r5, r0
 8003a38:	d4e0      	bmi.n	80039fc <_fflush_r+0xc>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	059b      	lsls	r3, r3, #22
 8003a3e:	d4dd      	bmi.n	80039fc <_fflush_r+0xc>
 8003a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a42:	f7ff fad0 	bl	8002fe6 <__retarget_lock_release_recursive>
 8003a46:	e7d9      	b.n	80039fc <_fflush_r+0xc>
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <_fflush_r+0x70>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	d101      	bne.n	8003a52 <_fflush_r+0x62>
 8003a4e:	68ac      	ldr	r4, [r5, #8]
 8003a50:	e7df      	b.n	8003a12 <_fflush_r+0x22>
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <_fflush_r+0x74>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	bf08      	it	eq
 8003a58:	68ec      	ldreq	r4, [r5, #12]
 8003a5a:	e7da      	b.n	8003a12 <_fflush_r+0x22>
 8003a5c:	08003d00 	.word	0x08003d00
 8003a60:	08003d20 	.word	0x08003d20
 8003a64:	08003ce0 	.word	0x08003ce0

08003a68 <_lseek_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d07      	ldr	r5, [pc, #28]	; (8003a88 <_lseek_r+0x20>)
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4608      	mov	r0, r1
 8003a70:	4611      	mov	r1, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	602a      	str	r2, [r5, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f7fc ffeb 	bl	8000a52 <_lseek>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_lseek_r+0x1e>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_lseek_r+0x1e>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	20000138 	.word	0x20000138

08003a8c <__swhatbuf_r>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	460e      	mov	r6, r1
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	2900      	cmp	r1, #0
 8003a96:	b096      	sub	sp, #88	; 0x58
 8003a98:	4614      	mov	r4, r2
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	da07      	bge.n	8003aae <__swhatbuf_r+0x22>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	89b3      	ldrh	r3, [r6, #12]
 8003aa4:	061a      	lsls	r2, r3, #24
 8003aa6:	d410      	bmi.n	8003aca <__swhatbuf_r+0x3e>
 8003aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aac:	e00e      	b.n	8003acc <__swhatbuf_r+0x40>
 8003aae:	466a      	mov	r2, sp
 8003ab0:	f000 f8be 	bl	8003c30 <_fstat_r>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	dbf2      	blt.n	8003a9e <__swhatbuf_r+0x12>
 8003ab8:	9a01      	ldr	r2, [sp, #4]
 8003aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ac2:	425a      	negs	r2, r3
 8003ac4:	415a      	adcs	r2, r3
 8003ac6:	602a      	str	r2, [r5, #0]
 8003ac8:	e7ee      	b.n	8003aa8 <__swhatbuf_r+0x1c>
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	2000      	movs	r0, #0
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	b016      	add	sp, #88	; 0x58
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}

08003ad4 <__smakebuf_r>:
 8003ad4:	898b      	ldrh	r3, [r1, #12]
 8003ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ad8:	079d      	lsls	r5, r3, #30
 8003ada:	4606      	mov	r6, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	d507      	bpl.n	8003af0 <__smakebuf_r+0x1c>
 8003ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6163      	str	r3, [r4, #20]
 8003aec:	b002      	add	sp, #8
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	ab01      	add	r3, sp, #4
 8003af2:	466a      	mov	r2, sp
 8003af4:	f7ff ffca 	bl	8003a8c <__swhatbuf_r>
 8003af8:	9900      	ldr	r1, [sp, #0]
 8003afa:	4605      	mov	r5, r0
 8003afc:	4630      	mov	r0, r6
 8003afe:	f7ff fa73 	bl	8002fe8 <_malloc_r>
 8003b02:	b948      	cbnz	r0, 8003b18 <__smakebuf_r+0x44>
 8003b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b08:	059a      	lsls	r2, r3, #22
 8003b0a:	d4ef      	bmi.n	8003aec <__smakebuf_r+0x18>
 8003b0c:	f023 0303 	bic.w	r3, r3, #3
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	e7e3      	b.n	8003ae0 <__smakebuf_r+0xc>
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <__smakebuf_r+0x7c>)
 8003b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	6020      	str	r0, [r4, #0]
 8003b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	9b00      	ldr	r3, [sp, #0]
 8003b28:	6163      	str	r3, [r4, #20]
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	6120      	str	r0, [r4, #16]
 8003b2e:	b15b      	cbz	r3, 8003b48 <__smakebuf_r+0x74>
 8003b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f88d 	bl	8003c54 <_isatty_r>
 8003b3a:	b128      	cbz	r0, 8003b48 <__smakebuf_r+0x74>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	89a0      	ldrh	r0, [r4, #12]
 8003b4a:	4305      	orrs	r5, r0
 8003b4c:	81a5      	strh	r5, [r4, #12]
 8003b4e:	e7cd      	b.n	8003aec <__smakebuf_r+0x18>
 8003b50:	08002e41 	.word	0x08002e41

08003b54 <__malloc_lock>:
 8003b54:	4801      	ldr	r0, [pc, #4]	; (8003b5c <__malloc_lock+0x8>)
 8003b56:	f7ff ba45 	b.w	8002fe4 <__retarget_lock_acquire_recursive>
 8003b5a:	bf00      	nop
 8003b5c:	20000130 	.word	0x20000130

08003b60 <__malloc_unlock>:
 8003b60:	4801      	ldr	r0, [pc, #4]	; (8003b68 <__malloc_unlock+0x8>)
 8003b62:	f7ff ba40 	b.w	8002fe6 <__retarget_lock_release_recursive>
 8003b66:	bf00      	nop
 8003b68:	20000130 	.word	0x20000130

08003b6c <_free_r>:
 8003b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b6e:	2900      	cmp	r1, #0
 8003b70:	d048      	beq.n	8003c04 <_free_r+0x98>
 8003b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b76:	9001      	str	r0, [sp, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b7e:	bfb8      	it	lt
 8003b80:	18e4      	addlt	r4, r4, r3
 8003b82:	f7ff ffe7 	bl	8003b54 <__malloc_lock>
 8003b86:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <_free_r+0x9c>)
 8003b88:	9801      	ldr	r0, [sp, #4]
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	b933      	cbnz	r3, 8003b9e <_free_r+0x32>
 8003b90:	6063      	str	r3, [r4, #4]
 8003b92:	6014      	str	r4, [r2, #0]
 8003b94:	b003      	add	sp, #12
 8003b96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b9a:	f7ff bfe1 	b.w	8003b60 <__malloc_unlock>
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	d90b      	bls.n	8003bba <_free_r+0x4e>
 8003ba2:	6821      	ldr	r1, [r4, #0]
 8003ba4:	1862      	adds	r2, r4, r1
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	bf04      	itt	eq
 8003baa:	681a      	ldreq	r2, [r3, #0]
 8003bac:	685b      	ldreq	r3, [r3, #4]
 8003bae:	6063      	str	r3, [r4, #4]
 8003bb0:	bf04      	itt	eq
 8003bb2:	1852      	addeq	r2, r2, r1
 8003bb4:	6022      	streq	r2, [r4, #0]
 8003bb6:	602c      	str	r4, [r5, #0]
 8003bb8:	e7ec      	b.n	8003b94 <_free_r+0x28>
 8003bba:	461a      	mov	r2, r3
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b10b      	cbz	r3, 8003bc4 <_free_r+0x58>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d9fa      	bls.n	8003bba <_free_r+0x4e>
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	1855      	adds	r5, r2, r1
 8003bc8:	42a5      	cmp	r5, r4
 8003bca:	d10b      	bne.n	8003be4 <_free_r+0x78>
 8003bcc:	6824      	ldr	r4, [r4, #0]
 8003bce:	4421      	add	r1, r4
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	42a3      	cmp	r3, r4
 8003bd4:	6011      	str	r1, [r2, #0]
 8003bd6:	d1dd      	bne.n	8003b94 <_free_r+0x28>
 8003bd8:	681c      	ldr	r4, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	6053      	str	r3, [r2, #4]
 8003bde:	4421      	add	r1, r4
 8003be0:	6011      	str	r1, [r2, #0]
 8003be2:	e7d7      	b.n	8003b94 <_free_r+0x28>
 8003be4:	d902      	bls.n	8003bec <_free_r+0x80>
 8003be6:	230c      	movs	r3, #12
 8003be8:	6003      	str	r3, [r0, #0]
 8003bea:	e7d3      	b.n	8003b94 <_free_r+0x28>
 8003bec:	6825      	ldr	r5, [r4, #0]
 8003bee:	1961      	adds	r1, r4, r5
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	bf04      	itt	eq
 8003bf4:	6819      	ldreq	r1, [r3, #0]
 8003bf6:	685b      	ldreq	r3, [r3, #4]
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	bf04      	itt	eq
 8003bfc:	1949      	addeq	r1, r1, r5
 8003bfe:	6021      	streq	r1, [r4, #0]
 8003c00:	6054      	str	r4, [r2, #4]
 8003c02:	e7c7      	b.n	8003b94 <_free_r+0x28>
 8003c04:	b003      	add	sp, #12
 8003c06:	bd30      	pop	{r4, r5, pc}
 8003c08:	20000090 	.word	0x20000090

08003c0c <_read_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4d07      	ldr	r5, [pc, #28]	; (8003c2c <_read_r+0x20>)
 8003c10:	4604      	mov	r4, r0
 8003c12:	4608      	mov	r0, r1
 8003c14:	4611      	mov	r1, r2
 8003c16:	2200      	movs	r2, #0
 8003c18:	602a      	str	r2, [r5, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7fc feb9 	bl	8000992 <_read>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_read_r+0x1e>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_read_r+0x1e>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000138 	.word	0x20000138

08003c30 <_fstat_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d07      	ldr	r5, [pc, #28]	; (8003c50 <_fstat_r+0x20>)
 8003c34:	2300      	movs	r3, #0
 8003c36:	4604      	mov	r4, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	f7fc feed 	bl	8000a1c <_fstat>
 8003c42:	1c43      	adds	r3, r0, #1
 8003c44:	d102      	bne.n	8003c4c <_fstat_r+0x1c>
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	b103      	cbz	r3, 8003c4c <_fstat_r+0x1c>
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	bd38      	pop	{r3, r4, r5, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000138 	.word	0x20000138

08003c54 <_isatty_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d06      	ldr	r5, [pc, #24]	; (8003c70 <_isatty_r+0x1c>)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	f7fc feec 	bl	8000a3c <_isatty>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d102      	bne.n	8003c6e <_isatty_r+0x1a>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	b103      	cbz	r3, 8003c6e <_isatty_r+0x1a>
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	20000138 	.word	0x20000138

08003c74 <_init>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr

08003c80 <_fini>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr
