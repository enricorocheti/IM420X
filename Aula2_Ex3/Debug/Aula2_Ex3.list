
Aula2_Ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a84  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d64  08003d64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003ddc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003ddc  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2d8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d14  00000000  00000000  0002c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fbf  00000000  00000000  0002f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6a3  00000000  00000000  000543b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e81d5  00000000  00000000  0005ea5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fac  00000000  00000000  00146c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003c4c 	.word	0x08003c4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003c4c 	.word	0x08003c4c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 facd 	bl	8000b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f805 	bl	80005ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8b4 	bl	8000730 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f868 	bl	800069c <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x14>

080005ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b0a8      	sub	sp, #160	; 0xa0
 80005d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d8:	2238      	movs	r2, #56	; 0x38
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fbd7 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2254      	movs	r2, #84	; 0x54
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fbc9 	bl	8002d90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fdde 	bl	80011c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2340      	movs	r3, #64	; 0x40
 8000610:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000624:	2355      	movs	r3, #85	; 0x55
 8000626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fe71 	bl	8001328 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800064c:	f000 f902 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f974 	bl	8001958 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000676:	f000 f8ed 	bl	8000854 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800067a:	2320      	movs	r3, #32
 800067c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb83 	bl	8001d90 <HAL_RCCEx_PeriphCLKConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000690:	f000 f8e0 	bl	8000854 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	37a0      	adds	r7, #160	; 0xa0
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	4a22      	ldr	r2, [pc, #136]	; (800072c <MX_LPUART1_UART_Init+0x90>)
 80006a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006e0:	f001 fda2 	bl	8002228 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f8b3 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 80006f2:	f002 fa59 	bl	8002ba8 <HAL_UARTEx_SetTxFifoThreshold>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006fc:	f000 f8aa 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	f002 fa8e 	bl	8002c24 <HAL_UARTEx_SetRxFifoThreshold>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800070e:	f000 f8a1 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f002 fa0f 	bl	8002b36 <HAL_UARTEx_DisableFifoMode>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800071e:	f000 f899 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000098 	.word	0x20000098
 800072c:	40008000 	.word	0x40008000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a32      	ldr	r2, [pc, #200]	; (8000814 <MX_GPIO_Init+0xe4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b30      	ldr	r3, [pc, #192]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_GPIO_Init+0xe4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a26      	ldr	r2, [pc, #152]	; (8000814 <MX_GPIO_Init+0xe4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a20      	ldr	r2, [pc, #128]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_GPIO_Init+0xe4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fcd7 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|PC2_Pin|PC3_Pin;
 80007b2:	f242 030c 	movw	r3, #8204	; 0x200c
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_GPIO_Init+0xe8>)
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0xec>)
 80007c8:	f000 fb48 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007cc:	2320      	movs	r3, #32
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 fb39 	bl	8000e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2008      	movs	r0, #8
 80007f0:	f000 faff 	bl	8000df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f000 fb16 	bl	8000e26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2009      	movs	r0, #9
 8000800:	f000 faf7 	bl	8000df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000804:	2009      	movs	r0, #9
 8000806:	f000 fb0e 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	10110000 	.word	0x10110000
 800081c:	48000800 	.word	0x48000800

08000820 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PC2_Pin)
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	2b04      	cmp	r3, #4
 800082e:	d102      	bne.n	8000836 <HAL_GPIO_EXTI_Callback+0x16>
	{
		printf("PC2 interrupt");
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000832:	f002 fab5 	bl	8002da0 <iprintf>
	}
	if (GPIO_Pin == PC3_Pin)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b08      	cmp	r3, #8
 800083a:	d102      	bne.n	8000842 <HAL_GPIO_EXTI_Callback+0x22>
	{
		printf("PC3 interrupt");
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <HAL_GPIO_EXTI_Callback+0x30>)
 800083e:	f002 faaf 	bl	8002da0 <iprintf>
	}
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	08003c64 	.word	0x08003c64
 8000850:	08003c74 	.word	0x08003c74

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000896:	f000 fd37 	bl	8001308 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_UART_MspInit+0x7c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d128      	bne.n	800091c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_UART_MspInit+0x80>)
 80008cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008ce:	4a16      	ldr	r2, [pc, #88]	; (8000928 <HAL_UART_MspInit+0x80>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UART_MspInit+0x80>)
 80008d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0x80>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_UART_MspInit+0x80>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_UART_MspInit+0x80>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800090a:	230c      	movs	r3, #12
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f000 faa0 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40008000 	.word	0x40008000
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f942 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000984:	2004      	movs	r0, #4
 8000986:	f000 fc03 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000992:	2008      	movs	r0, #8
 8000994:	f000 fbfc 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
	}

return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf1      	blt.n	80009e8 <_write+0x12>
	}
	return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	605a      	str	r2, [r3, #4]
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f002 f948 	bl	8002d3c <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20020000 	.word	0x20020000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	20000140 	.word	0x20000140

08000ae4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 f907 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fd3d 	bl	80005b8 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b4c:	08003d6c 	.word	0x08003d6c
  ldr r2, =_sbss
 8000b50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b54:	2000013c 	.word	0x2000013c

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>

08000b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f939 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f80e 	bl	8000b8c <HAL_InitTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	e001      	b.n	8000b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7c:	f7ff fe70 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b80:	79fb      	ldrb	r3, [r7, #7]

}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_InitTick+0x68>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d022      	beq.n	8000be6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_InitTick+0x6c>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_InitTick+0x68>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f944 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10f      	bne.n	8000be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d809      	bhi.n	8000bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	f04f 30ff 	mov.w	r0, #4294967295
 8000bce:	f000 f910 	bl	8000df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0x70>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e007      	b.n	8000bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e004      	b.n	8000bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e001      	b.n	8000bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x20>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c10:	6013      	str	r3, [r2, #0]
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20000128 	.word	0x20000128
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000128 	.word	0x20000128

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <__NVIC_EnableIRQ+0x38>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff29 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff40 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff90 	bl	8000d30 <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5f 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff33 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa4 	bl	8000d98 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e6a:	e15a      	b.n	8001122 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 814c 	beq.w	800111c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 0201 	and.w	r2, r3, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0xea>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d123      	bne.n	8000f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	6939      	ldr	r1, [r7, #16]
 8000f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0203 	and.w	r2, r3, #3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80a6 	beq.w	800111c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd0:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd4:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6613      	str	r3, [r2, #96]	; 0x60
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe8:	4a56      	ldr	r2, [pc, #344]	; (8001144 <HAL_GPIO_Init+0x2e8>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001012:	d01f      	beq.n	8001054 <HAL_GPIO_Init+0x1f8>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x2ec>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d019      	beq.n	8001050 <HAL_GPIO_Init+0x1f4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x2f0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x1f0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x2f4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1ec>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1e8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1e4>
 800103c:	2305      	movs	r3, #5
 800103e:	e00a      	b.n	8001056 <HAL_GPIO_Init+0x1fa>
 8001040:	2306      	movs	r3, #6
 8001042:	e008      	b.n	8001056 <HAL_GPIO_Init+0x1fa>
 8001044:	2304      	movs	r3, #4
 8001046:	e006      	b.n	8001056 <HAL_GPIO_Init+0x1fa>
 8001048:	2303      	movs	r3, #3
 800104a:	e004      	b.n	8001056 <HAL_GPIO_Init+0x1fa>
 800104c:	2302      	movs	r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x1fa>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_GPIO_Init+0x1fa>
 8001054:	2300      	movs	r3, #0
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	f002 0203 	and.w	r2, r2, #3
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	4093      	lsls	r3, r2
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001066:	4937      	ldr	r1, [pc, #220]	; (8001144 <HAL_GPIO_Init+0x2e8>)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <HAL_GPIO_Init+0x300>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <HAL_GPIO_Init+0x300>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_GPIO_Init+0x300>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <HAL_GPIO_Init+0x300>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_GPIO_Init+0x300>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <HAL_GPIO_Init+0x300>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <HAL_GPIO_Init+0x300>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <HAL_GPIO_Init+0x300>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	f47f ae9d 	bne.w	8000e6c <HAL_GPIO_Init+0x10>
  }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800
 8001150:	48000c00 	.word	0x48000c00
 8001154:	48001000 	.word	0x48001000
 8001158:	48001400 	.word	0x48001400
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800117c:	e002      	b.n	8001184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fb36 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d141      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011da:	d131      	bne.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011e2:	4a46      	ldr	r2, [pc, #280]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f4:	4a41      	ldr	r2, [pc, #260]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fc:	4b40      	ldr	r3, [pc, #256]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	0c9b      	lsrs	r3, r3, #18
 800120e:	3301      	adds	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001212:	e002      	b.n	800121a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3b01      	subs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001226:	d102      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f2      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	d158      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e057      	b.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001246:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800124c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001250:	e04d      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001258:	d141      	bne.n	80012de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001266:	d131      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001280:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2232      	movs	r2, #50	; 0x32
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	0c9b      	lsrs	r3, r3, #18
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129e:	e002      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	d102      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f2      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d112      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e011      	b.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012dc:	e007      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40007000 	.word	0x40007000
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001316:	6093      	str	r3, [r2, #8]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40007000 	.word	0x40007000

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e308      	b.n	800194c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d075      	beq.n	8001432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001346:	4ba3      	ldr	r3, [pc, #652]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001350:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b0c      	cmp	r3, #12
 800135e:	d102      	bne.n	8001366 <HAL_RCC_OscConfig+0x3e>
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d002      	beq.n	800136c <HAL_RCC_OscConfig+0x44>
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b08      	cmp	r3, #8
 800136a:	d10b      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4b99      	ldr	r3, [pc, #612]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d05b      	beq.n	8001430 <HAL_RCC_OscConfig+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d157      	bne.n	8001430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e2e3      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x74>
 800138e:	4b91      	ldr	r3, [pc, #580]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a8a      	ldr	r2, [pc, #552]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a87      	ldr	r2, [pc, #540]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 80013c0:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a83      	ldr	r2, [pc, #524]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a80      	ldr	r2, [pc, #512]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc20 	bl	8000c24 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fc1c 	bl	8000c24 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e2a8      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xc0>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc0c 	bl	8000c24 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fc08 	bl	8000c24 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e294      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0xe8>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d075      	beq.n	800152a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001448:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d102      	bne.n	800145e <HAL_RCC_OscConfig+0x136>
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d002      	beq.n	8001464 <HAL_RCC_OscConfig+0x13c>
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d11f      	bne.n	80014a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001464:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x154>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e267      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	4952      	ldr	r1, [pc, #328]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fb79 	bl	8000b8c <HAL_InitTick>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d043      	beq.n	8001528 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e253      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d023      	beq.n	80014f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbb4 	bl	8000c24 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fbb0 	bl	8000c24 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e23c      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	4939      	ldr	r1, [pc, #228]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e01a      	b.n	800152a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a36      	ldr	r2, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fb90 	bl	8000c24 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fb8c 	bl	8000c24 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e218      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1e0>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01c      	beq.n	8001578 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001544:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff fb69 	bl	8000c24 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff fb65 	bl	8000c24 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1f1      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0ef      	beq.n	8001556 <HAL_RCC_OscConfig+0x22e>
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff fb4c 	bl	8000c24 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fb48 	bl	8000c24 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1d4      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ef      	bne.n	8001590 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80ab 	beq.w	8001714 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x2b4>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e005      	b.n	80015de <HAL_RCC_OscConfig+0x2b6>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2300      	movs	r3, #0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00d      	beq.n	80015fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4baf      	ldr	r3, [pc, #700]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4aae      	ldr	r2, [pc, #696]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4bac      	ldr	r3, [pc, #688]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fe:	4ba9      	ldr	r3, [pc, #676]	; (80018a4 <HAL_RCC_OscConfig+0x57c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800160a:	4ba6      	ldr	r3, [pc, #664]	; (80018a4 <HAL_RCC_OscConfig+0x57c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4aa5      	ldr	r2, [pc, #660]	; (80018a4 <HAL_RCC_OscConfig+0x57c>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb05 	bl	8000c24 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff fb01 	bl	8000c24 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e18d      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001630:	4b9c      	ldr	r3, [pc, #624]	; (80018a4 <HAL_RCC_OscConfig+0x57c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_RCC_OscConfig+0x32e>
 8001644:	4b96      	ldr	r3, [pc, #600]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	4a95      	ldr	r2, [pc, #596]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001654:	e024      	b.n	80016a0 <HAL_RCC_OscConfig+0x378>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d110      	bne.n	8001680 <HAL_RCC_OscConfig+0x358>
 800165e:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001664:	4a8e      	ldr	r2, [pc, #568]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800166e:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	4a8a      	ldr	r2, [pc, #552]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167e:	e00f      	b.n	80016a0 <HAL_RCC_OscConfig+0x378>
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a86      	ldr	r2, [pc, #536]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a82      	ldr	r2, [pc, #520]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d016      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fabc 	bl	8000c24 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fab8 	bl	8000c24 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e142      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c6:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ed      	beq.n	80016b0 <HAL_RCC_OscConfig+0x388>
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff faa5 	bl	8000c24 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff faa1 	bl	8000c24 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e12b      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ed      	bne.n	80016de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	4a64      	ldr	r2, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b00      	cmp	r3, #0
 800171e:	d03c      	beq.n	800179a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01c      	beq.n	8001762 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001728:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800172a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172e:	4a5c      	ldr	r2, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fa74 	bl	8000c24 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001740:	f7ff fa70 	bl	8000c24 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0fc      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ef      	beq.n	8001740 <HAL_RCC_OscConfig+0x418>
 8001760:	e01b      	b.n	800179a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001762:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001768:	4a4d      	ldr	r2, [pc, #308]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fa57 	bl	8000c24 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177a:	f7ff fa53 	bl	8000c24 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0df      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800178c:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800178e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ef      	bne.n	800177a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80d3 	beq.w	800194a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b0c      	cmp	r3, #12
 80017ae:	f000 808d 	beq.w	80018cc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d15a      	bne.n	8001870 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80017c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa2d 	bl	8000c24 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fa29 	bl	8000c24 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0b5      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_RCC_OscConfig+0x580>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6a11      	ldr	r1, [r2, #32]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fc:	3a01      	subs	r2, #1
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001806:	0212      	lsls	r2, r2, #8
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800180e:	0852      	lsrs	r2, r2, #1
 8001810:	3a01      	subs	r2, #1
 8001812:	0552      	lsls	r2, r2, #21
 8001814:	4311      	orrs	r1, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800181a:	0852      	lsrs	r2, r2, #1
 800181c:	3a01      	subs	r2, #1
 800181e:	0652      	lsls	r2, r2, #25
 8001820:	4311      	orrs	r1, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001826:	06d2      	lsls	r2, r2, #27
 8001828:	430a      	orrs	r2, r1
 800182a:	491d      	ldr	r1, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001846:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff f9ec 	bl	8000c24 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff f9e8 	bl	8000c24 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e074      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x528>
 800186e:	e06c      	b.n	800194a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800187a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 8001882:	f023 0303 	bic.w	r3, r3, #3
 8001886:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_RCC_OscConfig+0x578>)
 800188e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f9c4 	bl	8000c24 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189e:	e00e      	b.n	80018be <HAL_RCC_OscConfig+0x596>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40007000 	.word	0x40007000
 80018a8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f9ba 	bl	8000c24 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e046      	b.n	800194c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x62c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x584>
 80018ca:	e03e      	b.n	800194a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e039      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_RCC_OscConfig+0x62c>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d12c      	bne.n	8001946 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	3b01      	subs	r3, #1
 80018f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d123      	bne.n	8001946 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d11b      	bne.n	8001946 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d113      	bne.n	8001946 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d109      	bne.n	8001946 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e11e      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b91      	ldr	r3, [pc, #580]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d910      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 020f 	bic.w	r2, r3, #15
 8001986:	498c      	ldr	r1, [pc, #560]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e106      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d073      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d129      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b4:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0f4      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019c4:	f000 f99e 	bl	8001d04 <RCC_GetSysClockFreqFromPLLSource>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4a7c      	ldr	r2, [pc, #496]	; (8001bc0 <HAL_RCC_ClockConfig+0x268>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d93f      	bls.n	8001a52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019d2:	4b7a      	ldr	r3, [pc, #488]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d033      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12f      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019fa:	4a70      	ldr	r2, [pc, #448]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e024      	b.n	8001a52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0c6      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0be      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a30:	f000 f8ce 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_RCC_ClockConfig+0x268>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d909      	bls.n	8001a52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a46:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4957      	ldr	r1, [pc, #348]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a64:	f7ff f8de 	bl	8000c24 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff f8da 	bl	8000c24 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e095      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d023      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001acc:	4a3b      	ldr	r2, [pc, #236]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001ace:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4936      	ldr	r1, [pc, #216]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b80      	cmp	r3, #128	; 0x80
 8001aec:	d105      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4a32      	ldr	r2, [pc, #200]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d21d      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 020f 	bic.w	r2, r3, #15
 8001b10:	4929      	ldr	r1, [pc, #164]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b18:	f7ff f884 	bl	8000c24 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff f880 	bl	8000c24 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e03b      	b.n	8001bae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_ClockConfig+0x260>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1ed      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490f      	ldr	r1, [pc, #60]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b82:	f000 f825 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_ClockConfig+0x264>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <HAL_RCC_ClockConfig+0x26c>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x270>)
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fff0 	bl	8000b8c <HAL_InitTick>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	04c4b400 	.word	0x04c4b400
 8001bc4:	08003c84 	.word	0x08003c84
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d102      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	e047      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e03e      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d136      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c24:	4a1a      	ldr	r2, [pc, #104]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2e:	68d2      	ldr	r2, [r2, #12]
 8001c30:	0a12      	lsrs	r2, r2, #8
 8001c32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
      break;
 8001c3c:	e00c      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c3e:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c48:	68d2      	ldr	r2, [r2, #12]
 8001c4a:	0a12      	lsrs	r2, r2, #8
 8001c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
      break;
 8001c56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0e5b      	lsrs	r3, r3, #25
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	3301      	adds	r3, #1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e001      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c78:	693b      	ldr	r3, [r7, #16]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	016e3600 	.word	0x016e3600

08001c94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08003c94 	.word	0x08003c94

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cdc:	f7ff ffda 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0adb      	lsrs	r3, r3, #11
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4904      	ldr	r1, [pc, #16]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08003c94 	.word	0x08003c94

08001d04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d10c      	bne.n	8001d42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d32:	68d2      	ldr	r2, [r2, #12]
 8001d34:	0a12      	lsrs	r2, r2, #8
 8001d36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
    break;
 8001d40:	e00c      	b.n	8001d5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	0a12      	lsrs	r2, r2, #8
 8001d50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
    break;
 8001d5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0e5b      	lsrs	r3, r3, #25
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d76:	687b      	ldr	r3, [r7, #4]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	016e3600 	.word	0x016e3600
 8001d8c:	00f42400 	.word	0x00f42400

08001d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8098 	beq.w	8001ede <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a39      	ldr	r2, [pc, #228]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de6:	f7fe ff1d 	bl	8000c24 <HAL_GetTick>
 8001dea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dec:	e009      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7fe ff19 	bl	8000c24 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d902      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	74fb      	strb	r3, [r7, #19]
        break;
 8001e00:	e005      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ef      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d159      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01e      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d019      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e5c:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d016      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fed9 	bl	8000c24 <HAL_GetTick>
 8001e72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e74:	e00b      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe fed5 	bl	8000c24 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d902      	bls.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	74fb      	strb	r3, [r7, #19]
            break;
 8001e8c:	e006      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ec      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eb8:	e008      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eba:	7cfb      	ldrb	r3, [r7, #19]
 8001ebc:	74bb      	strb	r3, [r7, #18]
 8001ebe:	e005      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ecc:	7c7b      	ldrb	r3, [r7, #17]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4baf      	ldr	r3, [pc, #700]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4aae      	ldr	r2, [pc, #696]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eea:	4ba9      	ldr	r3, [pc, #676]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f023 0203 	bic.w	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	49a5      	ldr	r1, [pc, #660]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f0c:	4ba0      	ldr	r3, [pc, #640]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f023 020c 	bic.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	499d      	ldr	r1, [pc, #628]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f2e:	4b98      	ldr	r3, [pc, #608]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4994      	ldr	r1, [pc, #592]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f50:	4b8f      	ldr	r3, [pc, #572]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	498c      	ldr	r1, [pc, #560]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f72:	4b87      	ldr	r3, [pc, #540]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	4983      	ldr	r1, [pc, #524]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f94:	4b7e      	ldr	r3, [pc, #504]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	497b      	ldr	r1, [pc, #492]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb6:	4b76      	ldr	r3, [pc, #472]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	4972      	ldr	r1, [pc, #456]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fd8:	4b6d      	ldr	r3, [pc, #436]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	496a      	ldr	r1, [pc, #424]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffa:	4b65      	ldr	r3, [pc, #404]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	4961      	ldr	r1, [pc, #388]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800201c:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800201e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	4959      	ldr	r1, [pc, #356]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800203e:	4b54      	ldr	r3, [pc, #336]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	4950      	ldr	r1, [pc, #320]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4948      	ldr	r1, [pc, #288]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b43      	ldr	r3, [pc, #268]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a42      	ldr	r2, [pc, #264]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	493a      	ldr	r1, [pc, #232]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b8:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a34      	ldr	r2, [pc, #208]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	492c      	ldr	r1, [pc, #176]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	491e      	ldr	r1, [pc, #120]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4910      	ldr	r1, [pc, #64]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4902      	ldr	r1, [pc, #8]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800218e:	e001      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002190:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800219c:	d105      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d015      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	4917      	ldr	r1, [pc, #92]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d4:	d105      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4909      	ldr	r1, [pc, #36]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800220c:	d105      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002218:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800221a:	7cbb      	ldrb	r3, [r7, #18]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e042      	b.n	80022c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7fe fb2b 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2224      	movs	r2, #36	; 0x24
 8002256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f82c 	bl	80022c8 <UART_SetConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e022      	b.n	80022c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 faea 	bl	800285c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb71 	bl	80029a0 <UART_CheckIdleState>
 80022be:	4603      	mov	r3, r0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4bb1      	ldr	r3, [pc, #708]	; (80025b8 <UART_SetConfig+0x2f0>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	69f9      	ldr	r1, [r7, #28]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4aa6      	ldr	r2, [pc, #664]	; (80025bc <UART_SetConfig+0x2f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	4313      	orrs	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800233a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	69f9      	ldr	r1, [r7, #28]
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f023 010f 	bic.w	r1, r3, #15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a97      	ldr	r2, [pc, #604]	; (80025c0 <UART_SetConfig+0x2f8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d120      	bne.n	80023aa <UART_SetConfig+0xe2>
 8002368:	4b96      	ldr	r3, [pc, #600]	; (80025c4 <UART_SetConfig+0x2fc>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b03      	cmp	r3, #3
 8002374:	d816      	bhi.n	80023a4 <UART_SetConfig+0xdc>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <UART_SetConfig+0xb4>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002399 	.word	0x08002399
 8002384:	08002393 	.word	0x08002393
 8002388:	0800239f 	.word	0x0800239f
 800238c:	2301      	movs	r3, #1
 800238e:	76fb      	strb	r3, [r7, #27]
 8002390:	e0e7      	b.n	8002562 <UART_SetConfig+0x29a>
 8002392:	2302      	movs	r3, #2
 8002394:	76fb      	strb	r3, [r7, #27]
 8002396:	e0e4      	b.n	8002562 <UART_SetConfig+0x29a>
 8002398:	2304      	movs	r3, #4
 800239a:	76fb      	strb	r3, [r7, #27]
 800239c:	e0e1      	b.n	8002562 <UART_SetConfig+0x29a>
 800239e:	2308      	movs	r3, #8
 80023a0:	76fb      	strb	r3, [r7, #27]
 80023a2:	e0de      	b.n	8002562 <UART_SetConfig+0x29a>
 80023a4:	2310      	movs	r3, #16
 80023a6:	76fb      	strb	r3, [r7, #27]
 80023a8:	e0db      	b.n	8002562 <UART_SetConfig+0x29a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a86      	ldr	r2, [pc, #536]	; (80025c8 <UART_SetConfig+0x300>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d132      	bne.n	800241a <UART_SetConfig+0x152>
 80023b4:	4b83      	ldr	r3, [pc, #524]	; (80025c4 <UART_SetConfig+0x2fc>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d828      	bhi.n	8002414 <UART_SetConfig+0x14c>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <UART_SetConfig+0x100>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023fd 	.word	0x080023fd
 80023cc:	08002415 	.word	0x08002415
 80023d0:	08002415 	.word	0x08002415
 80023d4:	08002415 	.word	0x08002415
 80023d8:	08002409 	.word	0x08002409
 80023dc:	08002415 	.word	0x08002415
 80023e0:	08002415 	.word	0x08002415
 80023e4:	08002415 	.word	0x08002415
 80023e8:	08002403 	.word	0x08002403
 80023ec:	08002415 	.word	0x08002415
 80023f0:	08002415 	.word	0x08002415
 80023f4:	08002415 	.word	0x08002415
 80023f8:	0800240f 	.word	0x0800240f
 80023fc:	2300      	movs	r3, #0
 80023fe:	76fb      	strb	r3, [r7, #27]
 8002400:	e0af      	b.n	8002562 <UART_SetConfig+0x29a>
 8002402:	2302      	movs	r3, #2
 8002404:	76fb      	strb	r3, [r7, #27]
 8002406:	e0ac      	b.n	8002562 <UART_SetConfig+0x29a>
 8002408:	2304      	movs	r3, #4
 800240a:	76fb      	strb	r3, [r7, #27]
 800240c:	e0a9      	b.n	8002562 <UART_SetConfig+0x29a>
 800240e:	2308      	movs	r3, #8
 8002410:	76fb      	strb	r3, [r7, #27]
 8002412:	e0a6      	b.n	8002562 <UART_SetConfig+0x29a>
 8002414:	2310      	movs	r3, #16
 8002416:	76fb      	strb	r3, [r7, #27]
 8002418:	e0a3      	b.n	8002562 <UART_SetConfig+0x29a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6b      	ldr	r2, [pc, #428]	; (80025cc <UART_SetConfig+0x304>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d120      	bne.n	8002466 <UART_SetConfig+0x19e>
 8002424:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <UART_SetConfig+0x2fc>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800242e:	2b30      	cmp	r3, #48	; 0x30
 8002430:	d013      	beq.n	800245a <UART_SetConfig+0x192>
 8002432:	2b30      	cmp	r3, #48	; 0x30
 8002434:	d814      	bhi.n	8002460 <UART_SetConfig+0x198>
 8002436:	2b20      	cmp	r3, #32
 8002438:	d009      	beq.n	800244e <UART_SetConfig+0x186>
 800243a:	2b20      	cmp	r3, #32
 800243c:	d810      	bhi.n	8002460 <UART_SetConfig+0x198>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <UART_SetConfig+0x180>
 8002442:	2b10      	cmp	r3, #16
 8002444:	d006      	beq.n	8002454 <UART_SetConfig+0x18c>
 8002446:	e00b      	b.n	8002460 <UART_SetConfig+0x198>
 8002448:	2300      	movs	r3, #0
 800244a:	76fb      	strb	r3, [r7, #27]
 800244c:	e089      	b.n	8002562 <UART_SetConfig+0x29a>
 800244e:	2302      	movs	r3, #2
 8002450:	76fb      	strb	r3, [r7, #27]
 8002452:	e086      	b.n	8002562 <UART_SetConfig+0x29a>
 8002454:	2304      	movs	r3, #4
 8002456:	76fb      	strb	r3, [r7, #27]
 8002458:	e083      	b.n	8002562 <UART_SetConfig+0x29a>
 800245a:	2308      	movs	r3, #8
 800245c:	76fb      	strb	r3, [r7, #27]
 800245e:	e080      	b.n	8002562 <UART_SetConfig+0x29a>
 8002460:	2310      	movs	r3, #16
 8002462:	76fb      	strb	r3, [r7, #27]
 8002464:	e07d      	b.n	8002562 <UART_SetConfig+0x29a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a59      	ldr	r2, [pc, #356]	; (80025d0 <UART_SetConfig+0x308>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d120      	bne.n	80024b2 <UART_SetConfig+0x1ea>
 8002470:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <UART_SetConfig+0x2fc>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800247a:	2bc0      	cmp	r3, #192	; 0xc0
 800247c:	d013      	beq.n	80024a6 <UART_SetConfig+0x1de>
 800247e:	2bc0      	cmp	r3, #192	; 0xc0
 8002480:	d814      	bhi.n	80024ac <UART_SetConfig+0x1e4>
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d009      	beq.n	800249a <UART_SetConfig+0x1d2>
 8002486:	2b80      	cmp	r3, #128	; 0x80
 8002488:	d810      	bhi.n	80024ac <UART_SetConfig+0x1e4>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <UART_SetConfig+0x1cc>
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d006      	beq.n	80024a0 <UART_SetConfig+0x1d8>
 8002492:	e00b      	b.n	80024ac <UART_SetConfig+0x1e4>
 8002494:	2300      	movs	r3, #0
 8002496:	76fb      	strb	r3, [r7, #27]
 8002498:	e063      	b.n	8002562 <UART_SetConfig+0x29a>
 800249a:	2302      	movs	r3, #2
 800249c:	76fb      	strb	r3, [r7, #27]
 800249e:	e060      	b.n	8002562 <UART_SetConfig+0x29a>
 80024a0:	2304      	movs	r3, #4
 80024a2:	76fb      	strb	r3, [r7, #27]
 80024a4:	e05d      	b.n	8002562 <UART_SetConfig+0x29a>
 80024a6:	2308      	movs	r3, #8
 80024a8:	76fb      	strb	r3, [r7, #27]
 80024aa:	e05a      	b.n	8002562 <UART_SetConfig+0x29a>
 80024ac:	2310      	movs	r3, #16
 80024ae:	76fb      	strb	r3, [r7, #27]
 80024b0:	e057      	b.n	8002562 <UART_SetConfig+0x29a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <UART_SetConfig+0x30c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d125      	bne.n	8002508 <UART_SetConfig+0x240>
 80024bc:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <UART_SetConfig+0x2fc>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ca:	d017      	beq.n	80024fc <UART_SetConfig+0x234>
 80024cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024d0:	d817      	bhi.n	8002502 <UART_SetConfig+0x23a>
 80024d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d6:	d00b      	beq.n	80024f0 <UART_SetConfig+0x228>
 80024d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024dc:	d811      	bhi.n	8002502 <UART_SetConfig+0x23a>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <UART_SetConfig+0x222>
 80024e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e6:	d006      	beq.n	80024f6 <UART_SetConfig+0x22e>
 80024e8:	e00b      	b.n	8002502 <UART_SetConfig+0x23a>
 80024ea:	2300      	movs	r3, #0
 80024ec:	76fb      	strb	r3, [r7, #27]
 80024ee:	e038      	b.n	8002562 <UART_SetConfig+0x29a>
 80024f0:	2302      	movs	r3, #2
 80024f2:	76fb      	strb	r3, [r7, #27]
 80024f4:	e035      	b.n	8002562 <UART_SetConfig+0x29a>
 80024f6:	2304      	movs	r3, #4
 80024f8:	76fb      	strb	r3, [r7, #27]
 80024fa:	e032      	b.n	8002562 <UART_SetConfig+0x29a>
 80024fc:	2308      	movs	r3, #8
 80024fe:	76fb      	strb	r3, [r7, #27]
 8002500:	e02f      	b.n	8002562 <UART_SetConfig+0x29a>
 8002502:	2310      	movs	r3, #16
 8002504:	76fb      	strb	r3, [r7, #27]
 8002506:	e02c      	b.n	8002562 <UART_SetConfig+0x29a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <UART_SetConfig+0x2f4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d125      	bne.n	800255e <UART_SetConfig+0x296>
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <UART_SetConfig+0x2fc>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800251c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002520:	d017      	beq.n	8002552 <UART_SetConfig+0x28a>
 8002522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002526:	d817      	bhi.n	8002558 <UART_SetConfig+0x290>
 8002528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800252c:	d00b      	beq.n	8002546 <UART_SetConfig+0x27e>
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d811      	bhi.n	8002558 <UART_SetConfig+0x290>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <UART_SetConfig+0x278>
 8002538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253c:	d006      	beq.n	800254c <UART_SetConfig+0x284>
 800253e:	e00b      	b.n	8002558 <UART_SetConfig+0x290>
 8002540:	2300      	movs	r3, #0
 8002542:	76fb      	strb	r3, [r7, #27]
 8002544:	e00d      	b.n	8002562 <UART_SetConfig+0x29a>
 8002546:	2302      	movs	r3, #2
 8002548:	76fb      	strb	r3, [r7, #27]
 800254a:	e00a      	b.n	8002562 <UART_SetConfig+0x29a>
 800254c:	2304      	movs	r3, #4
 800254e:	76fb      	strb	r3, [r7, #27]
 8002550:	e007      	b.n	8002562 <UART_SetConfig+0x29a>
 8002552:	2308      	movs	r3, #8
 8002554:	76fb      	strb	r3, [r7, #27]
 8002556:	e004      	b.n	8002562 <UART_SetConfig+0x29a>
 8002558:	2310      	movs	r3, #16
 800255a:	76fb      	strb	r3, [r7, #27]
 800255c:	e001      	b.n	8002562 <UART_SetConfig+0x29a>
 800255e:	2310      	movs	r3, #16
 8002560:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <UART_SetConfig+0x2f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	f040 809f 	bne.w	80026ac <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800256e:	7efb      	ldrb	r3, [r7, #27]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d837      	bhi.n	80025e4 <UART_SetConfig+0x31c>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <UART_SetConfig+0x2b4>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	080025a1 	.word	0x080025a1
 8002580:	080025e5 	.word	0x080025e5
 8002584:	080025a9 	.word	0x080025a9
 8002588:	080025e5 	.word	0x080025e5
 800258c:	080025af 	.word	0x080025af
 8002590:	080025e5 	.word	0x080025e5
 8002594:	080025e5 	.word	0x080025e5
 8002598:	080025e5 	.word	0x080025e5
 800259c:	080025dd 	.word	0x080025dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025a0:	f7ff fb84 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 80025a4:	6178      	str	r0, [r7, #20]
        break;
 80025a6:	e022      	b.n	80025ee <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <UART_SetConfig+0x310>)
 80025aa:	617b      	str	r3, [r7, #20]
        break;
 80025ac:	e01f      	b.n	80025ee <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ae:	f7ff fb0f 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 80025b2:	6178      	str	r0, [r7, #20]
        break;
 80025b4:	e01b      	b.n	80025ee <UART_SetConfig+0x326>
 80025b6:	bf00      	nop
 80025b8:	cfff69f3 	.word	0xcfff69f3
 80025bc:	40008000 	.word	0x40008000
 80025c0:	40013800 	.word	0x40013800
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40004400 	.word	0x40004400
 80025cc:	40004800 	.word	0x40004800
 80025d0:	40004c00 	.word	0x40004c00
 80025d4:	40005000 	.word	0x40005000
 80025d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e0:	617b      	str	r3, [r7, #20]
        break;
 80025e2:	e004      	b.n	80025ee <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	76bb      	strb	r3, [r7, #26]
        break;
 80025ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 811b 	beq.w	800282c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4a96      	ldr	r2, [pc, #600]	; (8002854 <UART_SetConfig+0x58c>)
 80025fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002600:	461a      	mov	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fbb3 f3f2 	udiv	r3, r3, r2
 8002608:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d305      	bcc.n	8002626 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d902      	bls.n	800262c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	76bb      	strb	r3, [r7, #26]
 800262a:	e0ff      	b.n	800282c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4618      	mov	r0, r3
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	4a86      	ldr	r2, [pc, #536]	; (8002854 <UART_SetConfig+0x58c>)
 800263a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800263e:	b29a      	uxth	r2, r3
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	f7fd fe3c 	bl	80002c0 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	020b      	lsls	r3, r1, #8
 800265a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800265e:	0202      	lsls	r2, r0, #8
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	6849      	ldr	r1, [r1, #4]
 8002664:	0849      	lsrs	r1, r1, #1
 8002666:	4608      	mov	r0, r1
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	1814      	adds	r4, r2, r0
 800266e:	eb43 0501 	adc.w	r5, r3, r1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd fe1e 	bl	80002c0 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002692:	d308      	bcc.n	80026a6 <UART_SetConfig+0x3de>
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269a:	d204      	bcs.n	80026a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	e0c2      	b.n	800282c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	76bb      	strb	r3, [r7, #26]
 80026aa:	e0bf      	b.n	800282c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b4:	d165      	bne.n	8002782 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80026b6:	7efb      	ldrb	r3, [r7, #27]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d828      	bhi.n	800270e <UART_SetConfig+0x446>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <UART_SetConfig+0x3fc>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	080026e9 	.word	0x080026e9
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	080026f9 	.word	0x080026f9
 80026d0:	0800270f 	.word	0x0800270f
 80026d4:	080026ff 	.word	0x080026ff
 80026d8:	0800270f 	.word	0x0800270f
 80026dc:	0800270f 	.word	0x0800270f
 80026e0:	0800270f 	.word	0x0800270f
 80026e4:	08002707 	.word	0x08002707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026e8:	f7ff fae0 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 80026ec:	6178      	str	r0, [r7, #20]
        break;
 80026ee:	e013      	b.n	8002718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026f0:	f7ff faf2 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 80026f4:	6178      	str	r0, [r7, #20]
        break;
 80026f6:	e00f      	b.n	8002718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026f8:	4b57      	ldr	r3, [pc, #348]	; (8002858 <UART_SetConfig+0x590>)
 80026fa:	617b      	str	r3, [r7, #20]
        break;
 80026fc:	e00c      	b.n	8002718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026fe:	f7ff fa67 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8002702:	6178      	str	r0, [r7, #20]
        break;
 8002704:	e008      	b.n	8002718 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270a:	617b      	str	r3, [r7, #20]
        break;
 800270c:	e004      	b.n	8002718 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	76bb      	strb	r3, [r7, #26]
        break;
 8002716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8086 	beq.w	800282c <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	4a4b      	ldr	r2, [pc, #300]	; (8002854 <UART_SetConfig+0x58c>)
 8002726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272a:	461a      	mov	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002732:	005a      	lsls	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	441a      	add	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	b29b      	uxth	r3, r3
 8002746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	d916      	bls.n	800277c <UART_SetConfig+0x4b4>
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d212      	bcs.n	800277c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f023 030f 	bic.w	r3, r3, #15
 800275e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	b29a      	uxth	r2, r3
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	4313      	orrs	r3, r2
 8002770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	89fa      	ldrh	r2, [r7, #14]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	e057      	b.n	800282c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	76bb      	strb	r3, [r7, #26]
 8002780:	e054      	b.n	800282c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002782:	7efb      	ldrb	r3, [r7, #27]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d828      	bhi.n	80027da <UART_SetConfig+0x512>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <UART_SetConfig+0x4c8>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027bd 	.word	0x080027bd
 8002798:	080027c5 	.word	0x080027c5
 800279c:	080027db 	.word	0x080027db
 80027a0:	080027cb 	.word	0x080027cb
 80027a4:	080027db 	.word	0x080027db
 80027a8:	080027db 	.word	0x080027db
 80027ac:	080027db 	.word	0x080027db
 80027b0:	080027d3 	.word	0x080027d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b4:	f7ff fa7a 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 80027b8:	6178      	str	r0, [r7, #20]
        break;
 80027ba:	e013      	b.n	80027e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027bc:	f7ff fa8c 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 80027c0:	6178      	str	r0, [r7, #20]
        break;
 80027c2:	e00f      	b.n	80027e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <UART_SetConfig+0x590>)
 80027c6:	617b      	str	r3, [r7, #20]
        break;
 80027c8:	e00c      	b.n	80027e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ca:	f7ff fa01 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 80027ce:	6178      	str	r0, [r7, #20]
        break;
 80027d0:	e008      	b.n	80027e4 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d6:	617b      	str	r3, [r7, #20]
        break;
 80027d8:	e004      	b.n	80027e4 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	76bb      	strb	r3, [r7, #26]
        break;
 80027e2:	bf00      	nop
    }

    if (pclk != 0U)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d020      	beq.n	800282c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4a19      	ldr	r2, [pc, #100]	; (8002854 <UART_SetConfig+0x58c>)
 80027f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f4:	461a      	mov	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	d908      	bls.n	8002828 <UART_SetConfig+0x560>
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d204      	bcs.n	8002828 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e001      	b.n	800282c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002848:	7ebb      	ldrb	r3, [r7, #26]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	bf00      	nop
 8002854:	08003c9c 	.word	0x08003c9c
 8002858:	00f42400 	.word	0x00f42400

0800285c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01a      	beq.n	8002972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295a:	d10a      	bne.n	8002972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
  }
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b0:	f7fe f938 	bl	8000c24 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d10e      	bne.n	80029e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f82f 	bl	8002a36 <UART_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e025      	b.n	8002a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d10e      	bne.n	8002a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f819 	bl	8002a36 <UART_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e00f      	b.n	8002a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a46:	e062      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d05e      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7fe f8e8 	bl	8000c24 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11d      	bne.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e045      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d02e      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002abe:	d126      	bne.n	8002b0e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ad8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e00f      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d08d      	beq.n	8002a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_UARTEx_DisableFifoMode+0x16>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e027      	b.n	8002b9c <HAL_UARTEx_DisableFifoMode+0x66>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002b7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e02d      	b.n	8002c1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2224      	movs	r2, #36	; 0x24
 8002bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f84f 	bl	8002ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e02d      	b.n	8002c98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f811 	bl	8002ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002cc0:	e031      	b.n	8002d26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	0e5b      	lsrs	r3, r3, #25
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	0f5b      	lsrs	r3, r3, #29
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	7b3a      	ldrb	r2, [r7, #12]
 8002cee:	4911      	ldr	r1, [pc, #68]	; (8002d34 <UARTEx_SetNbDataToProcess+0x94>)
 8002cf0:	5c8a      	ldrb	r2, [r1, r2]
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002cf6:	7b3a      	ldrb	r2, [r7, #12]
 8002cf8:	490f      	ldr	r1, [pc, #60]	; (8002d38 <UARTEx_SetNbDataToProcess+0x98>)
 8002cfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	7b7a      	ldrb	r2, [r7, #13]
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <UARTEx_SetNbDataToProcess+0x94>)
 8002d0e:	5c8a      	ldrb	r2, [r1, r2]
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d14:	7b7a      	ldrb	r2, [r7, #13]
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <UARTEx_SetNbDataToProcess+0x98>)
 8002d18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	08003cb4 	.word	0x08003cb4
 8002d38:	08003cbc 	.word	0x08003cbc

08002d3c <__errno>:
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <__errno+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 ff76 	bl	8003c4c <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08003d64 	.word	0x08003d64
 8002d84:	08003d64 	.word	0x08003d64
 8002d88:	08003d64 	.word	0x08003d64
 8002d8c:	08003d68 	.word	0x08003d68

08002d90 <memset>:
 8002d90:	4402      	add	r2, r0
 8002d92:	4603      	mov	r3, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <iprintf>:
 8002da0:	b40f      	push	{r0, r1, r2, r3}
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <iprintf+0x2c>)
 8002da4:	b513      	push	{r0, r1, r4, lr}
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	b124      	cbz	r4, 8002db4 <iprintf+0x14>
 8002daa:	69a3      	ldr	r3, [r4, #24]
 8002dac:	b913      	cbnz	r3, 8002db4 <iprintf+0x14>
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 f866 	bl	8002e80 <__sinit>
 8002db4:	ab05      	add	r3, sp, #20
 8002db6:	9a04      	ldr	r2, [sp, #16]
 8002db8:	68a1      	ldr	r1, [r4, #8]
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 f983 	bl	80030c8 <_vfiprintf_r>
 8002dc2:	b002      	add	sp, #8
 8002dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc8:	b004      	add	sp, #16
 8002dca:	4770      	bx	lr
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <std>:
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	b510      	push	{r4, lr}
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8002dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dde:	6083      	str	r3, [r0, #8]
 8002de0:	8181      	strh	r1, [r0, #12]
 8002de2:	6643      	str	r3, [r0, #100]	; 0x64
 8002de4:	81c2      	strh	r2, [r0, #14]
 8002de6:	6183      	str	r3, [r0, #24]
 8002de8:	4619      	mov	r1, r3
 8002dea:	2208      	movs	r2, #8
 8002dec:	305c      	adds	r0, #92	; 0x5c
 8002dee:	f7ff ffcf 	bl	8002d90 <memset>
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <std+0x38>)
 8002df4:	6263      	str	r3, [r4, #36]	; 0x24
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <std+0x3c>)
 8002df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <std+0x40>)
 8002dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <std+0x44>)
 8002e00:	6224      	str	r4, [r4, #32]
 8002e02:	6323      	str	r3, [r4, #48]	; 0x30
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	08003671 	.word	0x08003671
 8002e0c:	08003693 	.word	0x08003693
 8002e10:	080036cb 	.word	0x080036cb
 8002e14:	080036ef 	.word	0x080036ef

08002e18 <_cleanup_r>:
 8002e18:	4901      	ldr	r1, [pc, #4]	; (8002e20 <_cleanup_r+0x8>)
 8002e1a:	f000 b8af 	b.w	8002f7c <_fwalk_reent>
 8002e1e:	bf00      	nop
 8002e20:	080039c9 	.word	0x080039c9

08002e24 <__sfmoreglue>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	1e4a      	subs	r2, r1, #1
 8002e28:	2568      	movs	r5, #104	; 0x68
 8002e2a:	4355      	muls	r5, r2
 8002e2c:	460e      	mov	r6, r1
 8002e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e32:	f000 f8c5 	bl	8002fc0 <_malloc_r>
 8002e36:	4604      	mov	r4, r0
 8002e38:	b140      	cbz	r0, 8002e4c <__sfmoreglue+0x28>
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8002e40:	300c      	adds	r0, #12
 8002e42:	60a0      	str	r0, [r4, #8]
 8002e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e48:	f7ff ffa2 	bl	8002d90 <memset>
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}

08002e50 <__sfp_lock_acquire>:
 8002e50:	4801      	ldr	r0, [pc, #4]	; (8002e58 <__sfp_lock_acquire+0x8>)
 8002e52:	f000 b8b3 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 8002e56:	bf00      	nop
 8002e58:	20000134 	.word	0x20000134

08002e5c <__sfp_lock_release>:
 8002e5c:	4801      	ldr	r0, [pc, #4]	; (8002e64 <__sfp_lock_release+0x8>)
 8002e5e:	f000 b8ae 	b.w	8002fbe <__retarget_lock_release_recursive>
 8002e62:	bf00      	nop
 8002e64:	20000134 	.word	0x20000134

08002e68 <__sinit_lock_acquire>:
 8002e68:	4801      	ldr	r0, [pc, #4]	; (8002e70 <__sinit_lock_acquire+0x8>)
 8002e6a:	f000 b8a7 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 8002e6e:	bf00      	nop
 8002e70:	2000012f 	.word	0x2000012f

08002e74 <__sinit_lock_release>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__sinit_lock_release+0x8>)
 8002e76:	f000 b8a2 	b.w	8002fbe <__retarget_lock_release_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	2000012f 	.word	0x2000012f

08002e80 <__sinit>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
 8002e84:	f7ff fff0 	bl	8002e68 <__sinit_lock_acquire>
 8002e88:	69a3      	ldr	r3, [r4, #24]
 8002e8a:	b11b      	cbz	r3, 8002e94 <__sinit+0x14>
 8002e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e90:	f7ff bff0 	b.w	8002e74 <__sinit_lock_release>
 8002e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e98:	6523      	str	r3, [r4, #80]	; 0x50
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <__sinit+0x68>)
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <__sinit+0x6c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	bf04      	itt	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	61a3      	streq	r3, [r4, #24]
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f000 f820 	bl	8002ef0 <__sfp>
 8002eb0:	6060      	str	r0, [r4, #4]
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f000 f81c 	bl	8002ef0 <__sfp>
 8002eb8:	60a0      	str	r0, [r4, #8]
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 f818 	bl	8002ef0 <__sfp>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	60e0      	str	r0, [r4, #12]
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	6860      	ldr	r0, [r4, #4]
 8002ec8:	f7ff ff82 	bl	8002dd0 <std>
 8002ecc:	68a0      	ldr	r0, [r4, #8]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2109      	movs	r1, #9
 8002ed2:	f7ff ff7d 	bl	8002dd0 <std>
 8002ed6:	68e0      	ldr	r0, [r4, #12]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	2112      	movs	r1, #18
 8002edc:	f7ff ff78 	bl	8002dd0 <std>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61a3      	str	r3, [r4, #24]
 8002ee4:	e7d2      	b.n	8002e8c <__sinit+0xc>
 8002ee6:	bf00      	nop
 8002ee8:	08003cc4 	.word	0x08003cc4
 8002eec:	08002e19 	.word	0x08002e19

08002ef0 <__sfp>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	4607      	mov	r7, r0
 8002ef4:	f7ff ffac 	bl	8002e50 <__sfp_lock_acquire>
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <__sfp+0x84>)
 8002efa:	681e      	ldr	r6, [r3, #0]
 8002efc:	69b3      	ldr	r3, [r6, #24]
 8002efe:	b913      	cbnz	r3, 8002f06 <__sfp+0x16>
 8002f00:	4630      	mov	r0, r6
 8002f02:	f7ff ffbd 	bl	8002e80 <__sinit>
 8002f06:	3648      	adds	r6, #72	; 0x48
 8002f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	d503      	bpl.n	8002f18 <__sfp+0x28>
 8002f10:	6833      	ldr	r3, [r6, #0]
 8002f12:	b30b      	cbz	r3, 8002f58 <__sfp+0x68>
 8002f14:	6836      	ldr	r6, [r6, #0]
 8002f16:	e7f7      	b.n	8002f08 <__sfp+0x18>
 8002f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f1c:	b9d5      	cbnz	r5, 8002f54 <__sfp+0x64>
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <__sfp+0x88>)
 8002f20:	60e3      	str	r3, [r4, #12]
 8002f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f26:	6665      	str	r5, [r4, #100]	; 0x64
 8002f28:	f000 f847 	bl	8002fba <__retarget_lock_init_recursive>
 8002f2c:	f7ff ff96 	bl	8002e5c <__sfp_lock_release>
 8002f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f38:	6025      	str	r5, [r4, #0]
 8002f3a:	61a5      	str	r5, [r4, #24]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f44:	f7ff ff24 	bl	8002d90 <memset>
 8002f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f50:	4620      	mov	r0, r4
 8002f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f54:	3468      	adds	r4, #104	; 0x68
 8002f56:	e7d9      	b.n	8002f0c <__sfp+0x1c>
 8002f58:	2104      	movs	r1, #4
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	f7ff ff62 	bl	8002e24 <__sfmoreglue>
 8002f60:	4604      	mov	r4, r0
 8002f62:	6030      	str	r0, [r6, #0]
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d1d5      	bne.n	8002f14 <__sfp+0x24>
 8002f68:	f7ff ff78 	bl	8002e5c <__sfp_lock_release>
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	e7ee      	b.n	8002f50 <__sfp+0x60>
 8002f72:	bf00      	nop
 8002f74:	08003cc4 	.word	0x08003cc4
 8002f78:	ffff0001 	.word	0xffff0001

08002f7c <_fwalk_reent>:
 8002f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f80:	4606      	mov	r6, r0
 8002f82:	4688      	mov	r8, r1
 8002f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f88:	2700      	movs	r7, #0
 8002f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f92:	d505      	bpl.n	8002fa0 <_fwalk_reent+0x24>
 8002f94:	6824      	ldr	r4, [r4, #0]
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d1f7      	bne.n	8002f8a <_fwalk_reent+0xe>
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa0:	89ab      	ldrh	r3, [r5, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d907      	bls.n	8002fb6 <_fwalk_reent+0x3a>
 8002fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002faa:	3301      	adds	r3, #1
 8002fac:	d003      	beq.n	8002fb6 <_fwalk_reent+0x3a>
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	47c0      	blx	r8
 8002fb4:	4307      	orrs	r7, r0
 8002fb6:	3568      	adds	r5, #104	; 0x68
 8002fb8:	e7e9      	b.n	8002f8e <_fwalk_reent+0x12>

08002fba <__retarget_lock_init_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <__retarget_lock_acquire_recursive>:
 8002fbc:	4770      	bx	lr

08002fbe <__retarget_lock_release_recursive>:
 8002fbe:	4770      	bx	lr

08002fc0 <_malloc_r>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	1ccd      	adds	r5, r1, #3
 8002fc4:	f025 0503 	bic.w	r5, r5, #3
 8002fc8:	3508      	adds	r5, #8
 8002fca:	2d0c      	cmp	r5, #12
 8002fcc:	bf38      	it	cc
 8002fce:	250c      	movcc	r5, #12
 8002fd0:	2d00      	cmp	r5, #0
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	db01      	blt.n	8002fda <_malloc_r+0x1a>
 8002fd6:	42a9      	cmp	r1, r5
 8002fd8:	d903      	bls.n	8002fe2 <_malloc_r+0x22>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	6033      	str	r3, [r6, #0]
 8002fde:	2000      	movs	r0, #0
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe2:	f000 fda3 	bl	8003b2c <__malloc_lock>
 8002fe6:	4921      	ldr	r1, [pc, #132]	; (800306c <_malloc_r+0xac>)
 8002fe8:	680a      	ldr	r2, [r1, #0]
 8002fea:	4614      	mov	r4, r2
 8002fec:	b99c      	cbnz	r4, 8003016 <_malloc_r+0x56>
 8002fee:	4f20      	ldr	r7, [pc, #128]	; (8003070 <_malloc_r+0xb0>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	b923      	cbnz	r3, 8002ffe <_malloc_r+0x3e>
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 fb2a 	bl	8003650 <_sbrk_r>
 8002ffc:	6038      	str	r0, [r7, #0]
 8002ffe:	4629      	mov	r1, r5
 8003000:	4630      	mov	r0, r6
 8003002:	f000 fb25 	bl	8003650 <_sbrk_r>
 8003006:	1c43      	adds	r3, r0, #1
 8003008:	d123      	bne.n	8003052 <_malloc_r+0x92>
 800300a:	230c      	movs	r3, #12
 800300c:	6033      	str	r3, [r6, #0]
 800300e:	4630      	mov	r0, r6
 8003010:	f000 fd92 	bl	8003b38 <__malloc_unlock>
 8003014:	e7e3      	b.n	8002fde <_malloc_r+0x1e>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	1b5b      	subs	r3, r3, r5
 800301a:	d417      	bmi.n	800304c <_malloc_r+0x8c>
 800301c:	2b0b      	cmp	r3, #11
 800301e:	d903      	bls.n	8003028 <_malloc_r+0x68>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	441c      	add	r4, r3
 8003024:	6025      	str	r5, [r4, #0]
 8003026:	e004      	b.n	8003032 <_malloc_r+0x72>
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	42a2      	cmp	r2, r4
 800302c:	bf0c      	ite	eq
 800302e:	600b      	streq	r3, [r1, #0]
 8003030:	6053      	strne	r3, [r2, #4]
 8003032:	4630      	mov	r0, r6
 8003034:	f000 fd80 	bl	8003b38 <__malloc_unlock>
 8003038:	f104 000b 	add.w	r0, r4, #11
 800303c:	1d23      	adds	r3, r4, #4
 800303e:	f020 0007 	bic.w	r0, r0, #7
 8003042:	1ac2      	subs	r2, r0, r3
 8003044:	d0cc      	beq.n	8002fe0 <_malloc_r+0x20>
 8003046:	1a1b      	subs	r3, r3, r0
 8003048:	50a3      	str	r3, [r4, r2]
 800304a:	e7c9      	b.n	8002fe0 <_malloc_r+0x20>
 800304c:	4622      	mov	r2, r4
 800304e:	6864      	ldr	r4, [r4, #4]
 8003050:	e7cc      	b.n	8002fec <_malloc_r+0x2c>
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d0e3      	beq.n	8003024 <_malloc_r+0x64>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4630      	mov	r0, r6
 8003060:	f000 faf6 	bl	8003650 <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d1dd      	bne.n	8003024 <_malloc_r+0x64>
 8003068:	e7cf      	b.n	800300a <_malloc_r+0x4a>
 800306a:	bf00      	nop
 800306c:	20000090 	.word	0x20000090
 8003070:	20000094 	.word	0x20000094

08003074 <__sfputc_r>:
 8003074:	6893      	ldr	r3, [r2, #8]
 8003076:	3b01      	subs	r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	b410      	push	{r4}
 800307c:	6093      	str	r3, [r2, #8]
 800307e:	da08      	bge.n	8003092 <__sfputc_r+0x1e>
 8003080:	6994      	ldr	r4, [r2, #24]
 8003082:	42a3      	cmp	r3, r4
 8003084:	db01      	blt.n	800308a <__sfputc_r+0x16>
 8003086:	290a      	cmp	r1, #10
 8003088:	d103      	bne.n	8003092 <__sfputc_r+0x1e>
 800308a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800308e:	f000 bb33 	b.w	80036f8 <__swbuf_r>
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	1c58      	adds	r0, r3, #1
 8003096:	6010      	str	r0, [r2, #0]
 8003098:	7019      	strb	r1, [r3, #0]
 800309a:	4608      	mov	r0, r1
 800309c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <__sfputs_r>:
 80030a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a4:	4606      	mov	r6, r0
 80030a6:	460f      	mov	r7, r1
 80030a8:	4614      	mov	r4, r2
 80030aa:	18d5      	adds	r5, r2, r3
 80030ac:	42ac      	cmp	r4, r5
 80030ae:	d101      	bne.n	80030b4 <__sfputs_r+0x12>
 80030b0:	2000      	movs	r0, #0
 80030b2:	e007      	b.n	80030c4 <__sfputs_r+0x22>
 80030b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b8:	463a      	mov	r2, r7
 80030ba:	4630      	mov	r0, r6
 80030bc:	f7ff ffda 	bl	8003074 <__sfputc_r>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d1f3      	bne.n	80030ac <__sfputs_r+0xa>
 80030c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030c8 <_vfiprintf_r>:
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	460d      	mov	r5, r1
 80030ce:	b09d      	sub	sp, #116	; 0x74
 80030d0:	4614      	mov	r4, r2
 80030d2:	4698      	mov	r8, r3
 80030d4:	4606      	mov	r6, r0
 80030d6:	b118      	cbz	r0, 80030e0 <_vfiprintf_r+0x18>
 80030d8:	6983      	ldr	r3, [r0, #24]
 80030da:	b90b      	cbnz	r3, 80030e0 <_vfiprintf_r+0x18>
 80030dc:	f7ff fed0 	bl	8002e80 <__sinit>
 80030e0:	4b89      	ldr	r3, [pc, #548]	; (8003308 <_vfiprintf_r+0x240>)
 80030e2:	429d      	cmp	r5, r3
 80030e4:	d11b      	bne.n	800311e <_vfiprintf_r+0x56>
 80030e6:	6875      	ldr	r5, [r6, #4]
 80030e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030ea:	07d9      	lsls	r1, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_vfiprintf_r+0x32>
 80030ee:	89ab      	ldrh	r3, [r5, #12]
 80030f0:	059a      	lsls	r2, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_vfiprintf_r+0x32>
 80030f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030f6:	f7ff ff61 	bl	8002fbc <__retarget_lock_acquire_recursive>
 80030fa:	89ab      	ldrh	r3, [r5, #12]
 80030fc:	071b      	lsls	r3, r3, #28
 80030fe:	d501      	bpl.n	8003104 <_vfiprintf_r+0x3c>
 8003100:	692b      	ldr	r3, [r5, #16]
 8003102:	b9eb      	cbnz	r3, 8003140 <_vfiprintf_r+0x78>
 8003104:	4629      	mov	r1, r5
 8003106:	4630      	mov	r0, r6
 8003108:	f000 fb5a 	bl	80037c0 <__swsetup_r>
 800310c:	b1c0      	cbz	r0, 8003140 <_vfiprintf_r+0x78>
 800310e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003110:	07dc      	lsls	r4, r3, #31
 8003112:	d50e      	bpl.n	8003132 <_vfiprintf_r+0x6a>
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	b01d      	add	sp, #116	; 0x74
 800311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311e:	4b7b      	ldr	r3, [pc, #492]	; (800330c <_vfiprintf_r+0x244>)
 8003120:	429d      	cmp	r5, r3
 8003122:	d101      	bne.n	8003128 <_vfiprintf_r+0x60>
 8003124:	68b5      	ldr	r5, [r6, #8]
 8003126:	e7df      	b.n	80030e8 <_vfiprintf_r+0x20>
 8003128:	4b79      	ldr	r3, [pc, #484]	; (8003310 <_vfiprintf_r+0x248>)
 800312a:	429d      	cmp	r5, r3
 800312c:	bf08      	it	eq
 800312e:	68f5      	ldreq	r5, [r6, #12]
 8003130:	e7da      	b.n	80030e8 <_vfiprintf_r+0x20>
 8003132:	89ab      	ldrh	r3, [r5, #12]
 8003134:	0598      	lsls	r0, r3, #22
 8003136:	d4ed      	bmi.n	8003114 <_vfiprintf_r+0x4c>
 8003138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800313a:	f7ff ff40 	bl	8002fbe <__retarget_lock_release_recursive>
 800313e:	e7e9      	b.n	8003114 <_vfiprintf_r+0x4c>
 8003140:	2300      	movs	r3, #0
 8003142:	9309      	str	r3, [sp, #36]	; 0x24
 8003144:	2320      	movs	r3, #32
 8003146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800314a:	f8cd 800c 	str.w	r8, [sp, #12]
 800314e:	2330      	movs	r3, #48	; 0x30
 8003150:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003314 <_vfiprintf_r+0x24c>
 8003154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003158:	f04f 0901 	mov.w	r9, #1
 800315c:	4623      	mov	r3, r4
 800315e:	469a      	mov	sl, r3
 8003160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003164:	b10a      	cbz	r2, 800316a <_vfiprintf_r+0xa2>
 8003166:	2a25      	cmp	r2, #37	; 0x25
 8003168:	d1f9      	bne.n	800315e <_vfiprintf_r+0x96>
 800316a:	ebba 0b04 	subs.w	fp, sl, r4
 800316e:	d00b      	beq.n	8003188 <_vfiprintf_r+0xc0>
 8003170:	465b      	mov	r3, fp
 8003172:	4622      	mov	r2, r4
 8003174:	4629      	mov	r1, r5
 8003176:	4630      	mov	r0, r6
 8003178:	f7ff ff93 	bl	80030a2 <__sfputs_r>
 800317c:	3001      	adds	r0, #1
 800317e:	f000 80aa 	beq.w	80032d6 <_vfiprintf_r+0x20e>
 8003182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003184:	445a      	add	r2, fp
 8003186:	9209      	str	r2, [sp, #36]	; 0x24
 8003188:	f89a 3000 	ldrb.w	r3, [sl]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a2 	beq.w	80032d6 <_vfiprintf_r+0x20e>
 8003192:	2300      	movs	r3, #0
 8003194:	f04f 32ff 	mov.w	r2, #4294967295
 8003198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800319c:	f10a 0a01 	add.w	sl, sl, #1
 80031a0:	9304      	str	r3, [sp, #16]
 80031a2:	9307      	str	r3, [sp, #28]
 80031a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031a8:	931a      	str	r3, [sp, #104]	; 0x68
 80031aa:	4654      	mov	r4, sl
 80031ac:	2205      	movs	r2, #5
 80031ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b2:	4858      	ldr	r0, [pc, #352]	; (8003314 <_vfiprintf_r+0x24c>)
 80031b4:	f7fd f834 	bl	8000220 <memchr>
 80031b8:	9a04      	ldr	r2, [sp, #16]
 80031ba:	b9d8      	cbnz	r0, 80031f4 <_vfiprintf_r+0x12c>
 80031bc:	06d1      	lsls	r1, r2, #27
 80031be:	bf44      	itt	mi
 80031c0:	2320      	movmi	r3, #32
 80031c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031c6:	0713      	lsls	r3, r2, #28
 80031c8:	bf44      	itt	mi
 80031ca:	232b      	movmi	r3, #43	; 0x2b
 80031cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031d0:	f89a 3000 	ldrb.w	r3, [sl]
 80031d4:	2b2a      	cmp	r3, #42	; 0x2a
 80031d6:	d015      	beq.n	8003204 <_vfiprintf_r+0x13c>
 80031d8:	9a07      	ldr	r2, [sp, #28]
 80031da:	4654      	mov	r4, sl
 80031dc:	2000      	movs	r0, #0
 80031de:	f04f 0c0a 	mov.w	ip, #10
 80031e2:	4621      	mov	r1, r4
 80031e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031e8:	3b30      	subs	r3, #48	; 0x30
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	d94e      	bls.n	800328c <_vfiprintf_r+0x1c4>
 80031ee:	b1b0      	cbz	r0, 800321e <_vfiprintf_r+0x156>
 80031f0:	9207      	str	r2, [sp, #28]
 80031f2:	e014      	b.n	800321e <_vfiprintf_r+0x156>
 80031f4:	eba0 0308 	sub.w	r3, r0, r8
 80031f8:	fa09 f303 	lsl.w	r3, r9, r3
 80031fc:	4313      	orrs	r3, r2
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	46a2      	mov	sl, r4
 8003202:	e7d2      	b.n	80031aa <_vfiprintf_r+0xe2>
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	1d19      	adds	r1, r3, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	9103      	str	r1, [sp, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	bfbb      	ittet	lt
 8003210:	425b      	neglt	r3, r3
 8003212:	f042 0202 	orrlt.w	r2, r2, #2
 8003216:	9307      	strge	r3, [sp, #28]
 8003218:	9307      	strlt	r3, [sp, #28]
 800321a:	bfb8      	it	lt
 800321c:	9204      	strlt	r2, [sp, #16]
 800321e:	7823      	ldrb	r3, [r4, #0]
 8003220:	2b2e      	cmp	r3, #46	; 0x2e
 8003222:	d10c      	bne.n	800323e <_vfiprintf_r+0x176>
 8003224:	7863      	ldrb	r3, [r4, #1]
 8003226:	2b2a      	cmp	r3, #42	; 0x2a
 8003228:	d135      	bne.n	8003296 <_vfiprintf_r+0x1ce>
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	1d1a      	adds	r2, r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	9203      	str	r2, [sp, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfb8      	it	lt
 8003236:	f04f 33ff 	movlt.w	r3, #4294967295
 800323a:	3402      	adds	r4, #2
 800323c:	9305      	str	r3, [sp, #20]
 800323e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003324 <_vfiprintf_r+0x25c>
 8003242:	7821      	ldrb	r1, [r4, #0]
 8003244:	2203      	movs	r2, #3
 8003246:	4650      	mov	r0, sl
 8003248:	f7fc ffea 	bl	8000220 <memchr>
 800324c:	b140      	cbz	r0, 8003260 <_vfiprintf_r+0x198>
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	eba0 000a 	sub.w	r0, r0, sl
 8003254:	fa03 f000 	lsl.w	r0, r3, r0
 8003258:	9b04      	ldr	r3, [sp, #16]
 800325a:	4303      	orrs	r3, r0
 800325c:	3401      	adds	r4, #1
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003264:	482c      	ldr	r0, [pc, #176]	; (8003318 <_vfiprintf_r+0x250>)
 8003266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800326a:	2206      	movs	r2, #6
 800326c:	f7fc ffd8 	bl	8000220 <memchr>
 8003270:	2800      	cmp	r0, #0
 8003272:	d03f      	beq.n	80032f4 <_vfiprintf_r+0x22c>
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <_vfiprintf_r+0x254>)
 8003276:	bb1b      	cbnz	r3, 80032c0 <_vfiprintf_r+0x1f8>
 8003278:	9b03      	ldr	r3, [sp, #12]
 800327a:	3307      	adds	r3, #7
 800327c:	f023 0307 	bic.w	r3, r3, #7
 8003280:	3308      	adds	r3, #8
 8003282:	9303      	str	r3, [sp, #12]
 8003284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003286:	443b      	add	r3, r7
 8003288:	9309      	str	r3, [sp, #36]	; 0x24
 800328a:	e767      	b.n	800315c <_vfiprintf_r+0x94>
 800328c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003290:	460c      	mov	r4, r1
 8003292:	2001      	movs	r0, #1
 8003294:	e7a5      	b.n	80031e2 <_vfiprintf_r+0x11a>
 8003296:	2300      	movs	r3, #0
 8003298:	3401      	adds	r4, #1
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	4619      	mov	r1, r3
 800329e:	f04f 0c0a 	mov.w	ip, #10
 80032a2:	4620      	mov	r0, r4
 80032a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032a8:	3a30      	subs	r2, #48	; 0x30
 80032aa:	2a09      	cmp	r2, #9
 80032ac:	d903      	bls.n	80032b6 <_vfiprintf_r+0x1ee>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0c5      	beq.n	800323e <_vfiprintf_r+0x176>
 80032b2:	9105      	str	r1, [sp, #20]
 80032b4:	e7c3      	b.n	800323e <_vfiprintf_r+0x176>
 80032b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ba:	4604      	mov	r4, r0
 80032bc:	2301      	movs	r3, #1
 80032be:	e7f0      	b.n	80032a2 <_vfiprintf_r+0x1da>
 80032c0:	ab03      	add	r3, sp, #12
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	462a      	mov	r2, r5
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <_vfiprintf_r+0x258>)
 80032c8:	a904      	add	r1, sp, #16
 80032ca:	4630      	mov	r0, r6
 80032cc:	f3af 8000 	nop.w
 80032d0:	4607      	mov	r7, r0
 80032d2:	1c78      	adds	r0, r7, #1
 80032d4:	d1d6      	bne.n	8003284 <_vfiprintf_r+0x1bc>
 80032d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032d8:	07d9      	lsls	r1, r3, #31
 80032da:	d405      	bmi.n	80032e8 <_vfiprintf_r+0x220>
 80032dc:	89ab      	ldrh	r3, [r5, #12]
 80032de:	059a      	lsls	r2, r3, #22
 80032e0:	d402      	bmi.n	80032e8 <_vfiprintf_r+0x220>
 80032e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032e4:	f7ff fe6b 	bl	8002fbe <__retarget_lock_release_recursive>
 80032e8:	89ab      	ldrh	r3, [r5, #12]
 80032ea:	065b      	lsls	r3, r3, #25
 80032ec:	f53f af12 	bmi.w	8003114 <_vfiprintf_r+0x4c>
 80032f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032f2:	e711      	b.n	8003118 <_vfiprintf_r+0x50>
 80032f4:	ab03      	add	r3, sp, #12
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	462a      	mov	r2, r5
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <_vfiprintf_r+0x258>)
 80032fc:	a904      	add	r1, sp, #16
 80032fe:	4630      	mov	r0, r6
 8003300:	f000 f880 	bl	8003404 <_printf_i>
 8003304:	e7e4      	b.n	80032d0 <_vfiprintf_r+0x208>
 8003306:	bf00      	nop
 8003308:	08003ce8 	.word	0x08003ce8
 800330c:	08003d08 	.word	0x08003d08
 8003310:	08003cc8 	.word	0x08003cc8
 8003314:	08003d28 	.word	0x08003d28
 8003318:	08003d32 	.word	0x08003d32
 800331c:	00000000 	.word	0x00000000
 8003320:	080030a3 	.word	0x080030a3
 8003324:	08003d2e 	.word	0x08003d2e

08003328 <_printf_common>:
 8003328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	4616      	mov	r6, r2
 800332e:	4699      	mov	r9, r3
 8003330:	688a      	ldr	r2, [r1, #8]
 8003332:	690b      	ldr	r3, [r1, #16]
 8003334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003338:	4293      	cmp	r3, r2
 800333a:	bfb8      	it	lt
 800333c:	4613      	movlt	r3, r2
 800333e:	6033      	str	r3, [r6, #0]
 8003340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003344:	4607      	mov	r7, r0
 8003346:	460c      	mov	r4, r1
 8003348:	b10a      	cbz	r2, 800334e <_printf_common+0x26>
 800334a:	3301      	adds	r3, #1
 800334c:	6033      	str	r3, [r6, #0]
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	0699      	lsls	r1, r3, #26
 8003352:	bf42      	ittt	mi
 8003354:	6833      	ldrmi	r3, [r6, #0]
 8003356:	3302      	addmi	r3, #2
 8003358:	6033      	strmi	r3, [r6, #0]
 800335a:	6825      	ldr	r5, [r4, #0]
 800335c:	f015 0506 	ands.w	r5, r5, #6
 8003360:	d106      	bne.n	8003370 <_printf_common+0x48>
 8003362:	f104 0a19 	add.w	sl, r4, #25
 8003366:	68e3      	ldr	r3, [r4, #12]
 8003368:	6832      	ldr	r2, [r6, #0]
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	42ab      	cmp	r3, r5
 800336e:	dc26      	bgt.n	80033be <_printf_common+0x96>
 8003370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003374:	1e13      	subs	r3, r2, #0
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	bf18      	it	ne
 800337a:	2301      	movne	r3, #1
 800337c:	0692      	lsls	r2, r2, #26
 800337e:	d42b      	bmi.n	80033d8 <_printf_common+0xb0>
 8003380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003384:	4649      	mov	r1, r9
 8003386:	4638      	mov	r0, r7
 8003388:	47c0      	blx	r8
 800338a:	3001      	adds	r0, #1
 800338c:	d01e      	beq.n	80033cc <_printf_common+0xa4>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	68e5      	ldr	r5, [r4, #12]
 8003392:	6832      	ldr	r2, [r6, #0]
 8003394:	f003 0306 	and.w	r3, r3, #6
 8003398:	2b04      	cmp	r3, #4
 800339a:	bf08      	it	eq
 800339c:	1aad      	subeq	r5, r5, r2
 800339e:	68a3      	ldr	r3, [r4, #8]
 80033a0:	6922      	ldr	r2, [r4, #16]
 80033a2:	bf0c      	ite	eq
 80033a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033a8:	2500      	movne	r5, #0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bfc4      	itt	gt
 80033ae:	1a9b      	subgt	r3, r3, r2
 80033b0:	18ed      	addgt	r5, r5, r3
 80033b2:	2600      	movs	r6, #0
 80033b4:	341a      	adds	r4, #26
 80033b6:	42b5      	cmp	r5, r6
 80033b8:	d11a      	bne.n	80033f0 <_printf_common+0xc8>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e008      	b.n	80033d0 <_printf_common+0xa8>
 80033be:	2301      	movs	r3, #1
 80033c0:	4652      	mov	r2, sl
 80033c2:	4649      	mov	r1, r9
 80033c4:	4638      	mov	r0, r7
 80033c6:	47c0      	blx	r8
 80033c8:	3001      	adds	r0, #1
 80033ca:	d103      	bne.n	80033d4 <_printf_common+0xac>
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d4:	3501      	adds	r5, #1
 80033d6:	e7c6      	b.n	8003366 <_printf_common+0x3e>
 80033d8:	18e1      	adds	r1, r4, r3
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	2030      	movs	r0, #48	; 0x30
 80033de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033e2:	4422      	add	r2, r4
 80033e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ec:	3302      	adds	r3, #2
 80033ee:	e7c7      	b.n	8003380 <_printf_common+0x58>
 80033f0:	2301      	movs	r3, #1
 80033f2:	4622      	mov	r2, r4
 80033f4:	4649      	mov	r1, r9
 80033f6:	4638      	mov	r0, r7
 80033f8:	47c0      	blx	r8
 80033fa:	3001      	adds	r0, #1
 80033fc:	d0e6      	beq.n	80033cc <_printf_common+0xa4>
 80033fe:	3601      	adds	r6, #1
 8003400:	e7d9      	b.n	80033b6 <_printf_common+0x8e>
	...

08003404 <_printf_i>:
 8003404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003408:	460c      	mov	r4, r1
 800340a:	4691      	mov	r9, r2
 800340c:	7e27      	ldrb	r7, [r4, #24]
 800340e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003410:	2f78      	cmp	r7, #120	; 0x78
 8003412:	4680      	mov	r8, r0
 8003414:	469a      	mov	sl, r3
 8003416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800341a:	d807      	bhi.n	800342c <_printf_i+0x28>
 800341c:	2f62      	cmp	r7, #98	; 0x62
 800341e:	d80a      	bhi.n	8003436 <_printf_i+0x32>
 8003420:	2f00      	cmp	r7, #0
 8003422:	f000 80d8 	beq.w	80035d6 <_printf_i+0x1d2>
 8003426:	2f58      	cmp	r7, #88	; 0x58
 8003428:	f000 80a3 	beq.w	8003572 <_printf_i+0x16e>
 800342c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003434:	e03a      	b.n	80034ac <_printf_i+0xa8>
 8003436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800343a:	2b15      	cmp	r3, #21
 800343c:	d8f6      	bhi.n	800342c <_printf_i+0x28>
 800343e:	a001      	add	r0, pc, #4	; (adr r0, 8003444 <_printf_i+0x40>)
 8003440:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003444:	0800349d 	.word	0x0800349d
 8003448:	080034b1 	.word	0x080034b1
 800344c:	0800342d 	.word	0x0800342d
 8003450:	0800342d 	.word	0x0800342d
 8003454:	0800342d 	.word	0x0800342d
 8003458:	0800342d 	.word	0x0800342d
 800345c:	080034b1 	.word	0x080034b1
 8003460:	0800342d 	.word	0x0800342d
 8003464:	0800342d 	.word	0x0800342d
 8003468:	0800342d 	.word	0x0800342d
 800346c:	0800342d 	.word	0x0800342d
 8003470:	080035bd 	.word	0x080035bd
 8003474:	080034e1 	.word	0x080034e1
 8003478:	0800359f 	.word	0x0800359f
 800347c:	0800342d 	.word	0x0800342d
 8003480:	0800342d 	.word	0x0800342d
 8003484:	080035df 	.word	0x080035df
 8003488:	0800342d 	.word	0x0800342d
 800348c:	080034e1 	.word	0x080034e1
 8003490:	0800342d 	.word	0x0800342d
 8003494:	0800342d 	.word	0x0800342d
 8003498:	080035a7 	.word	0x080035a7
 800349c:	680b      	ldr	r3, [r1, #0]
 800349e:	1d1a      	adds	r2, r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	600a      	str	r2, [r1, #0]
 80034a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0a3      	b.n	80035f8 <_printf_i+0x1f4>
 80034b0:	6825      	ldr	r5, [r4, #0]
 80034b2:	6808      	ldr	r0, [r1, #0]
 80034b4:	062e      	lsls	r6, r5, #24
 80034b6:	f100 0304 	add.w	r3, r0, #4
 80034ba:	d50a      	bpl.n	80034d2 <_printf_i+0xce>
 80034bc:	6805      	ldr	r5, [r0, #0]
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	da03      	bge.n	80034cc <_printf_i+0xc8>
 80034c4:	232d      	movs	r3, #45	; 0x2d
 80034c6:	426d      	negs	r5, r5
 80034c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034cc:	485e      	ldr	r0, [pc, #376]	; (8003648 <_printf_i+0x244>)
 80034ce:	230a      	movs	r3, #10
 80034d0:	e019      	b.n	8003506 <_printf_i+0x102>
 80034d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034d6:	6805      	ldr	r5, [r0, #0]
 80034d8:	600b      	str	r3, [r1, #0]
 80034da:	bf18      	it	ne
 80034dc:	b22d      	sxthne	r5, r5
 80034de:	e7ef      	b.n	80034c0 <_printf_i+0xbc>
 80034e0:	680b      	ldr	r3, [r1, #0]
 80034e2:	6825      	ldr	r5, [r4, #0]
 80034e4:	1d18      	adds	r0, r3, #4
 80034e6:	6008      	str	r0, [r1, #0]
 80034e8:	0628      	lsls	r0, r5, #24
 80034ea:	d501      	bpl.n	80034f0 <_printf_i+0xec>
 80034ec:	681d      	ldr	r5, [r3, #0]
 80034ee:	e002      	b.n	80034f6 <_printf_i+0xf2>
 80034f0:	0669      	lsls	r1, r5, #25
 80034f2:	d5fb      	bpl.n	80034ec <_printf_i+0xe8>
 80034f4:	881d      	ldrh	r5, [r3, #0]
 80034f6:	4854      	ldr	r0, [pc, #336]	; (8003648 <_printf_i+0x244>)
 80034f8:	2f6f      	cmp	r7, #111	; 0x6f
 80034fa:	bf0c      	ite	eq
 80034fc:	2308      	moveq	r3, #8
 80034fe:	230a      	movne	r3, #10
 8003500:	2100      	movs	r1, #0
 8003502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003506:	6866      	ldr	r6, [r4, #4]
 8003508:	60a6      	str	r6, [r4, #8]
 800350a:	2e00      	cmp	r6, #0
 800350c:	bfa2      	ittt	ge
 800350e:	6821      	ldrge	r1, [r4, #0]
 8003510:	f021 0104 	bicge.w	r1, r1, #4
 8003514:	6021      	strge	r1, [r4, #0]
 8003516:	b90d      	cbnz	r5, 800351c <_printf_i+0x118>
 8003518:	2e00      	cmp	r6, #0
 800351a:	d04d      	beq.n	80035b8 <_printf_i+0x1b4>
 800351c:	4616      	mov	r6, r2
 800351e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003522:	fb03 5711 	mls	r7, r3, r1, r5
 8003526:	5dc7      	ldrb	r7, [r0, r7]
 8003528:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800352c:	462f      	mov	r7, r5
 800352e:	42bb      	cmp	r3, r7
 8003530:	460d      	mov	r5, r1
 8003532:	d9f4      	bls.n	800351e <_printf_i+0x11a>
 8003534:	2b08      	cmp	r3, #8
 8003536:	d10b      	bne.n	8003550 <_printf_i+0x14c>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	07df      	lsls	r7, r3, #31
 800353c:	d508      	bpl.n	8003550 <_printf_i+0x14c>
 800353e:	6923      	ldr	r3, [r4, #16]
 8003540:	6861      	ldr	r1, [r4, #4]
 8003542:	4299      	cmp	r1, r3
 8003544:	bfde      	ittt	le
 8003546:	2330      	movle	r3, #48	; 0x30
 8003548:	f806 3c01 	strble.w	r3, [r6, #-1]
 800354c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003550:	1b92      	subs	r2, r2, r6
 8003552:	6122      	str	r2, [r4, #16]
 8003554:	f8cd a000 	str.w	sl, [sp]
 8003558:	464b      	mov	r3, r9
 800355a:	aa03      	add	r2, sp, #12
 800355c:	4621      	mov	r1, r4
 800355e:	4640      	mov	r0, r8
 8003560:	f7ff fee2 	bl	8003328 <_printf_common>
 8003564:	3001      	adds	r0, #1
 8003566:	d14c      	bne.n	8003602 <_printf_i+0x1fe>
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	b004      	add	sp, #16
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003572:	4835      	ldr	r0, [pc, #212]	; (8003648 <_printf_i+0x244>)
 8003574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	680e      	ldr	r6, [r1, #0]
 800357c:	061f      	lsls	r7, r3, #24
 800357e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003582:	600e      	str	r6, [r1, #0]
 8003584:	d514      	bpl.n	80035b0 <_printf_i+0x1ac>
 8003586:	07d9      	lsls	r1, r3, #31
 8003588:	bf44      	itt	mi
 800358a:	f043 0320 	orrmi.w	r3, r3, #32
 800358e:	6023      	strmi	r3, [r4, #0]
 8003590:	b91d      	cbnz	r5, 800359a <_printf_i+0x196>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f023 0320 	bic.w	r3, r3, #32
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	2310      	movs	r3, #16
 800359c:	e7b0      	b.n	8003500 <_printf_i+0xfc>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	2378      	movs	r3, #120	; 0x78
 80035a8:	4828      	ldr	r0, [pc, #160]	; (800364c <_printf_i+0x248>)
 80035aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035ae:	e7e3      	b.n	8003578 <_printf_i+0x174>
 80035b0:	065e      	lsls	r6, r3, #25
 80035b2:	bf48      	it	mi
 80035b4:	b2ad      	uxthmi	r5, r5
 80035b6:	e7e6      	b.n	8003586 <_printf_i+0x182>
 80035b8:	4616      	mov	r6, r2
 80035ba:	e7bb      	b.n	8003534 <_printf_i+0x130>
 80035bc:	680b      	ldr	r3, [r1, #0]
 80035be:	6826      	ldr	r6, [r4, #0]
 80035c0:	6960      	ldr	r0, [r4, #20]
 80035c2:	1d1d      	adds	r5, r3, #4
 80035c4:	600d      	str	r5, [r1, #0]
 80035c6:	0635      	lsls	r5, r6, #24
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	d501      	bpl.n	80035d0 <_printf_i+0x1cc>
 80035cc:	6018      	str	r0, [r3, #0]
 80035ce:	e002      	b.n	80035d6 <_printf_i+0x1d2>
 80035d0:	0671      	lsls	r1, r6, #25
 80035d2:	d5fb      	bpl.n	80035cc <_printf_i+0x1c8>
 80035d4:	8018      	strh	r0, [r3, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	6123      	str	r3, [r4, #16]
 80035da:	4616      	mov	r6, r2
 80035dc:	e7ba      	b.n	8003554 <_printf_i+0x150>
 80035de:	680b      	ldr	r3, [r1, #0]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	600a      	str	r2, [r1, #0]
 80035e4:	681e      	ldr	r6, [r3, #0]
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	2100      	movs	r1, #0
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7fc fe18 	bl	8000220 <memchr>
 80035f0:	b108      	cbz	r0, 80035f6 <_printf_i+0x1f2>
 80035f2:	1b80      	subs	r0, r0, r6
 80035f4:	6060      	str	r0, [r4, #4]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	2300      	movs	r3, #0
 80035fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003600:	e7a8      	b.n	8003554 <_printf_i+0x150>
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	4632      	mov	r2, r6
 8003606:	4649      	mov	r1, r9
 8003608:	4640      	mov	r0, r8
 800360a:	47d0      	blx	sl
 800360c:	3001      	adds	r0, #1
 800360e:	d0ab      	beq.n	8003568 <_printf_i+0x164>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	079b      	lsls	r3, r3, #30
 8003614:	d413      	bmi.n	800363e <_printf_i+0x23a>
 8003616:	68e0      	ldr	r0, [r4, #12]
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	4298      	cmp	r0, r3
 800361c:	bfb8      	it	lt
 800361e:	4618      	movlt	r0, r3
 8003620:	e7a4      	b.n	800356c <_printf_i+0x168>
 8003622:	2301      	movs	r3, #1
 8003624:	4632      	mov	r2, r6
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	47d0      	blx	sl
 800362c:	3001      	adds	r0, #1
 800362e:	d09b      	beq.n	8003568 <_printf_i+0x164>
 8003630:	3501      	adds	r5, #1
 8003632:	68e3      	ldr	r3, [r4, #12]
 8003634:	9903      	ldr	r1, [sp, #12]
 8003636:	1a5b      	subs	r3, r3, r1
 8003638:	42ab      	cmp	r3, r5
 800363a:	dcf2      	bgt.n	8003622 <_printf_i+0x21e>
 800363c:	e7eb      	b.n	8003616 <_printf_i+0x212>
 800363e:	2500      	movs	r5, #0
 8003640:	f104 0619 	add.w	r6, r4, #25
 8003644:	e7f5      	b.n	8003632 <_printf_i+0x22e>
 8003646:	bf00      	nop
 8003648:	08003d39 	.word	0x08003d39
 800364c:	08003d4a 	.word	0x08003d4a

08003650 <_sbrk_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4d06      	ldr	r5, [pc, #24]	; (800366c <_sbrk_r+0x1c>)
 8003654:	2300      	movs	r3, #0
 8003656:	4604      	mov	r4, r0
 8003658:	4608      	mov	r0, r1
 800365a:	602b      	str	r3, [r5, #0]
 800365c:	f7fd fa0c 	bl	8000a78 <_sbrk>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_sbrk_r+0x1a>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b103      	cbz	r3, 800366a <_sbrk_r+0x1a>
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	20000138 	.word	0x20000138

08003670 <__sread>:
 8003670:	b510      	push	{r4, lr}
 8003672:	460c      	mov	r4, r1
 8003674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003678:	f000 fab4 	bl	8003be4 <_read_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	bfab      	itete	ge
 8003680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003682:	89a3      	ldrhlt	r3, [r4, #12]
 8003684:	181b      	addge	r3, r3, r0
 8003686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800368a:	bfac      	ite	ge
 800368c:	6563      	strge	r3, [r4, #84]	; 0x54
 800368e:	81a3      	strhlt	r3, [r4, #12]
 8003690:	bd10      	pop	{r4, pc}

08003692 <__swrite>:
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	461f      	mov	r7, r3
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	05db      	lsls	r3, r3, #23
 800369c:	4605      	mov	r5, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	4616      	mov	r6, r2
 80036a2:	d505      	bpl.n	80036b0 <__swrite+0x1e>
 80036a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a8:	2302      	movs	r3, #2
 80036aa:	2200      	movs	r2, #0
 80036ac:	f000 f9c8 	bl	8003a40 <_lseek_r>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	4632      	mov	r2, r6
 80036be:	463b      	mov	r3, r7
 80036c0:	4628      	mov	r0, r5
 80036c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036c6:	f000 b869 	b.w	800379c <_write_r>

080036ca <__sseek>:
 80036ca:	b510      	push	{r4, lr}
 80036cc:	460c      	mov	r4, r1
 80036ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d2:	f000 f9b5 	bl	8003a40 <_lseek_r>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	bf15      	itete	ne
 80036dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036e6:	81a3      	strheq	r3, [r4, #12]
 80036e8:	bf18      	it	ne
 80036ea:	81a3      	strhne	r3, [r4, #12]
 80036ec:	bd10      	pop	{r4, pc}

080036ee <__sclose>:
 80036ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f2:	f000 b8d3 	b.w	800389c <_close_r>
	...

080036f8 <__swbuf_r>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	460e      	mov	r6, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	4605      	mov	r5, r0
 8003700:	b118      	cbz	r0, 800370a <__swbuf_r+0x12>
 8003702:	6983      	ldr	r3, [r0, #24]
 8003704:	b90b      	cbnz	r3, 800370a <__swbuf_r+0x12>
 8003706:	f7ff fbbb 	bl	8002e80 <__sinit>
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <__swbuf_r+0x98>)
 800370c:	429c      	cmp	r4, r3
 800370e:	d12b      	bne.n	8003768 <__swbuf_r+0x70>
 8003710:	686c      	ldr	r4, [r5, #4]
 8003712:	69a3      	ldr	r3, [r4, #24]
 8003714:	60a3      	str	r3, [r4, #8]
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	071a      	lsls	r2, r3, #28
 800371a:	d52f      	bpl.n	800377c <__swbuf_r+0x84>
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	b36b      	cbz	r3, 800377c <__swbuf_r+0x84>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	1ac0      	subs	r0, r0, r3
 8003726:	6963      	ldr	r3, [r4, #20]
 8003728:	b2f6      	uxtb	r6, r6
 800372a:	4283      	cmp	r3, r0
 800372c:	4637      	mov	r7, r6
 800372e:	dc04      	bgt.n	800373a <__swbuf_r+0x42>
 8003730:	4621      	mov	r1, r4
 8003732:	4628      	mov	r0, r5
 8003734:	f000 f948 	bl	80039c8 <_fflush_r>
 8003738:	bb30      	cbnz	r0, 8003788 <__swbuf_r+0x90>
 800373a:	68a3      	ldr	r3, [r4, #8]
 800373c:	3b01      	subs	r3, #1
 800373e:	60a3      	str	r3, [r4, #8]
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	6022      	str	r2, [r4, #0]
 8003746:	701e      	strb	r6, [r3, #0]
 8003748:	6963      	ldr	r3, [r4, #20]
 800374a:	3001      	adds	r0, #1
 800374c:	4283      	cmp	r3, r0
 800374e:	d004      	beq.n	800375a <__swbuf_r+0x62>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	07db      	lsls	r3, r3, #31
 8003754:	d506      	bpl.n	8003764 <__swbuf_r+0x6c>
 8003756:	2e0a      	cmp	r6, #10
 8003758:	d104      	bne.n	8003764 <__swbuf_r+0x6c>
 800375a:	4621      	mov	r1, r4
 800375c:	4628      	mov	r0, r5
 800375e:	f000 f933 	bl	80039c8 <_fflush_r>
 8003762:	b988      	cbnz	r0, 8003788 <__swbuf_r+0x90>
 8003764:	4638      	mov	r0, r7
 8003766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <__swbuf_r+0x9c>)
 800376a:	429c      	cmp	r4, r3
 800376c:	d101      	bne.n	8003772 <__swbuf_r+0x7a>
 800376e:	68ac      	ldr	r4, [r5, #8]
 8003770:	e7cf      	b.n	8003712 <__swbuf_r+0x1a>
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <__swbuf_r+0xa0>)
 8003774:	429c      	cmp	r4, r3
 8003776:	bf08      	it	eq
 8003778:	68ec      	ldreq	r4, [r5, #12]
 800377a:	e7ca      	b.n	8003712 <__swbuf_r+0x1a>
 800377c:	4621      	mov	r1, r4
 800377e:	4628      	mov	r0, r5
 8003780:	f000 f81e 	bl	80037c0 <__swsetup_r>
 8003784:	2800      	cmp	r0, #0
 8003786:	d0cb      	beq.n	8003720 <__swbuf_r+0x28>
 8003788:	f04f 37ff 	mov.w	r7, #4294967295
 800378c:	e7ea      	b.n	8003764 <__swbuf_r+0x6c>
 800378e:	bf00      	nop
 8003790:	08003ce8 	.word	0x08003ce8
 8003794:	08003d08 	.word	0x08003d08
 8003798:	08003cc8 	.word	0x08003cc8

0800379c <_write_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4d07      	ldr	r5, [pc, #28]	; (80037bc <_write_r+0x20>)
 80037a0:	4604      	mov	r4, r0
 80037a2:	4608      	mov	r0, r1
 80037a4:	4611      	mov	r1, r2
 80037a6:	2200      	movs	r2, #0
 80037a8:	602a      	str	r2, [r5, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f7fd f913 	bl	80009d6 <_write>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_write_r+0x1e>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_write_r+0x1e>
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	20000138 	.word	0x20000138

080037c0 <__swsetup_r>:
 80037c0:	4b32      	ldr	r3, [pc, #200]	; (800388c <__swsetup_r+0xcc>)
 80037c2:	b570      	push	{r4, r5, r6, lr}
 80037c4:	681d      	ldr	r5, [r3, #0]
 80037c6:	4606      	mov	r6, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	b125      	cbz	r5, 80037d6 <__swsetup_r+0x16>
 80037cc:	69ab      	ldr	r3, [r5, #24]
 80037ce:	b913      	cbnz	r3, 80037d6 <__swsetup_r+0x16>
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff fb55 	bl	8002e80 <__sinit>
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <__swsetup_r+0xd0>)
 80037d8:	429c      	cmp	r4, r3
 80037da:	d10f      	bne.n	80037fc <__swsetup_r+0x3c>
 80037dc:	686c      	ldr	r4, [r5, #4]
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037e4:	0719      	lsls	r1, r3, #28
 80037e6:	d42c      	bmi.n	8003842 <__swsetup_r+0x82>
 80037e8:	06dd      	lsls	r5, r3, #27
 80037ea:	d411      	bmi.n	8003810 <__swsetup_r+0x50>
 80037ec:	2309      	movs	r3, #9
 80037ee:	6033      	str	r3, [r6, #0]
 80037f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	f04f 30ff 	mov.w	r0, #4294967295
 80037fa:	e03e      	b.n	800387a <__swsetup_r+0xba>
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <__swsetup_r+0xd4>)
 80037fe:	429c      	cmp	r4, r3
 8003800:	d101      	bne.n	8003806 <__swsetup_r+0x46>
 8003802:	68ac      	ldr	r4, [r5, #8]
 8003804:	e7eb      	b.n	80037de <__swsetup_r+0x1e>
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <__swsetup_r+0xd8>)
 8003808:	429c      	cmp	r4, r3
 800380a:	bf08      	it	eq
 800380c:	68ec      	ldreq	r4, [r5, #12]
 800380e:	e7e6      	b.n	80037de <__swsetup_r+0x1e>
 8003810:	0758      	lsls	r0, r3, #29
 8003812:	d512      	bpl.n	800383a <__swsetup_r+0x7a>
 8003814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003816:	b141      	cbz	r1, 800382a <__swsetup_r+0x6a>
 8003818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800381c:	4299      	cmp	r1, r3
 800381e:	d002      	beq.n	8003826 <__swsetup_r+0x66>
 8003820:	4630      	mov	r0, r6
 8003822:	f000 f98f 	bl	8003b44 <_free_r>
 8003826:	2300      	movs	r3, #0
 8003828:	6363      	str	r3, [r4, #52]	; 0x34
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003830:	81a3      	strh	r3, [r4, #12]
 8003832:	2300      	movs	r3, #0
 8003834:	6063      	str	r3, [r4, #4]
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	b94b      	cbnz	r3, 800385a <__swsetup_r+0x9a>
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003850:	d003      	beq.n	800385a <__swsetup_r+0x9a>
 8003852:	4621      	mov	r1, r4
 8003854:	4630      	mov	r0, r6
 8003856:	f000 f929 	bl	8003aac <__smakebuf_r>
 800385a:	89a0      	ldrh	r0, [r4, #12]
 800385c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003860:	f010 0301 	ands.w	r3, r0, #1
 8003864:	d00a      	beq.n	800387c <__swsetup_r+0xbc>
 8003866:	2300      	movs	r3, #0
 8003868:	60a3      	str	r3, [r4, #8]
 800386a:	6963      	ldr	r3, [r4, #20]
 800386c:	425b      	negs	r3, r3
 800386e:	61a3      	str	r3, [r4, #24]
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	b943      	cbnz	r3, 8003886 <__swsetup_r+0xc6>
 8003874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003878:	d1ba      	bne.n	80037f0 <__swsetup_r+0x30>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	0781      	lsls	r1, r0, #30
 800387e:	bf58      	it	pl
 8003880:	6963      	ldrpl	r3, [r4, #20]
 8003882:	60a3      	str	r3, [r4, #8]
 8003884:	e7f4      	b.n	8003870 <__swsetup_r+0xb0>
 8003886:	2000      	movs	r0, #0
 8003888:	e7f7      	b.n	800387a <__swsetup_r+0xba>
 800388a:	bf00      	nop
 800388c:	2000000c 	.word	0x2000000c
 8003890:	08003ce8 	.word	0x08003ce8
 8003894:	08003d08 	.word	0x08003d08
 8003898:	08003cc8 	.word	0x08003cc8

0800389c <_close_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d06      	ldr	r5, [pc, #24]	; (80038b8 <_close_r+0x1c>)
 80038a0:	2300      	movs	r3, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	602b      	str	r3, [r5, #0]
 80038a8:	f7fd f8b1 	bl	8000a0e <_close>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_close_r+0x1a>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_close_r+0x1a>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000138 	.word	0x20000138

080038bc <__sflush_r>:
 80038bc:	898a      	ldrh	r2, [r1, #12]
 80038be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c2:	4605      	mov	r5, r0
 80038c4:	0710      	lsls	r0, r2, #28
 80038c6:	460c      	mov	r4, r1
 80038c8:	d458      	bmi.n	800397c <__sflush_r+0xc0>
 80038ca:	684b      	ldr	r3, [r1, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	dc05      	bgt.n	80038dc <__sflush_r+0x20>
 80038d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	dc02      	bgt.n	80038dc <__sflush_r+0x20>
 80038d6:	2000      	movs	r0, #0
 80038d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038de:	2e00      	cmp	r6, #0
 80038e0:	d0f9      	beq.n	80038d6 <__sflush_r+0x1a>
 80038e2:	2300      	movs	r3, #0
 80038e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038e8:	682f      	ldr	r7, [r5, #0]
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	d032      	beq.n	8003954 <__sflush_r+0x98>
 80038ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	075a      	lsls	r2, r3, #29
 80038f4:	d505      	bpl.n	8003902 <__sflush_r+0x46>
 80038f6:	6863      	ldr	r3, [r4, #4]
 80038f8:	1ac0      	subs	r0, r0, r3
 80038fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038fc:	b10b      	cbz	r3, 8003902 <__sflush_r+0x46>
 80038fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003900:	1ac0      	subs	r0, r0, r3
 8003902:	2300      	movs	r3, #0
 8003904:	4602      	mov	r2, r0
 8003906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003908:	6a21      	ldr	r1, [r4, #32]
 800390a:	4628      	mov	r0, r5
 800390c:	47b0      	blx	r6
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	d106      	bne.n	8003922 <__sflush_r+0x66>
 8003914:	6829      	ldr	r1, [r5, #0]
 8003916:	291d      	cmp	r1, #29
 8003918:	d82c      	bhi.n	8003974 <__sflush_r+0xb8>
 800391a:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <__sflush_r+0x108>)
 800391c:	40ca      	lsrs	r2, r1
 800391e:	07d6      	lsls	r6, r2, #31
 8003920:	d528      	bpl.n	8003974 <__sflush_r+0xb8>
 8003922:	2200      	movs	r2, #0
 8003924:	6062      	str	r2, [r4, #4]
 8003926:	04d9      	lsls	r1, r3, #19
 8003928:	6922      	ldr	r2, [r4, #16]
 800392a:	6022      	str	r2, [r4, #0]
 800392c:	d504      	bpl.n	8003938 <__sflush_r+0x7c>
 800392e:	1c42      	adds	r2, r0, #1
 8003930:	d101      	bne.n	8003936 <__sflush_r+0x7a>
 8003932:	682b      	ldr	r3, [r5, #0]
 8003934:	b903      	cbnz	r3, 8003938 <__sflush_r+0x7c>
 8003936:	6560      	str	r0, [r4, #84]	; 0x54
 8003938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800393a:	602f      	str	r7, [r5, #0]
 800393c:	2900      	cmp	r1, #0
 800393e:	d0ca      	beq.n	80038d6 <__sflush_r+0x1a>
 8003940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003944:	4299      	cmp	r1, r3
 8003946:	d002      	beq.n	800394e <__sflush_r+0x92>
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f8fb 	bl	8003b44 <_free_r>
 800394e:	2000      	movs	r0, #0
 8003950:	6360      	str	r0, [r4, #52]	; 0x34
 8003952:	e7c1      	b.n	80038d8 <__sflush_r+0x1c>
 8003954:	6a21      	ldr	r1, [r4, #32]
 8003956:	2301      	movs	r3, #1
 8003958:	4628      	mov	r0, r5
 800395a:	47b0      	blx	r6
 800395c:	1c41      	adds	r1, r0, #1
 800395e:	d1c7      	bne.n	80038f0 <__sflush_r+0x34>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0c4      	beq.n	80038f0 <__sflush_r+0x34>
 8003966:	2b1d      	cmp	r3, #29
 8003968:	d001      	beq.n	800396e <__sflush_r+0xb2>
 800396a:	2b16      	cmp	r3, #22
 800396c:	d101      	bne.n	8003972 <__sflush_r+0xb6>
 800396e:	602f      	str	r7, [r5, #0]
 8003970:	e7b1      	b.n	80038d6 <__sflush_r+0x1a>
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	e7ad      	b.n	80038d8 <__sflush_r+0x1c>
 800397c:	690f      	ldr	r7, [r1, #16]
 800397e:	2f00      	cmp	r7, #0
 8003980:	d0a9      	beq.n	80038d6 <__sflush_r+0x1a>
 8003982:	0793      	lsls	r3, r2, #30
 8003984:	680e      	ldr	r6, [r1, #0]
 8003986:	bf08      	it	eq
 8003988:	694b      	ldreq	r3, [r1, #20]
 800398a:	600f      	str	r7, [r1, #0]
 800398c:	bf18      	it	ne
 800398e:	2300      	movne	r3, #0
 8003990:	eba6 0807 	sub.w	r8, r6, r7
 8003994:	608b      	str	r3, [r1, #8]
 8003996:	f1b8 0f00 	cmp.w	r8, #0
 800399a:	dd9c      	ble.n	80038d6 <__sflush_r+0x1a>
 800399c:	6a21      	ldr	r1, [r4, #32]
 800399e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039a0:	4643      	mov	r3, r8
 80039a2:	463a      	mov	r2, r7
 80039a4:	4628      	mov	r0, r5
 80039a6:	47b0      	blx	r6
 80039a8:	2800      	cmp	r0, #0
 80039aa:	dc06      	bgt.n	80039ba <__sflush_r+0xfe>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b2:	81a3      	strh	r3, [r4, #12]
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295
 80039b8:	e78e      	b.n	80038d8 <__sflush_r+0x1c>
 80039ba:	4407      	add	r7, r0
 80039bc:	eba8 0800 	sub.w	r8, r8, r0
 80039c0:	e7e9      	b.n	8003996 <__sflush_r+0xda>
 80039c2:	bf00      	nop
 80039c4:	20400001 	.word	0x20400001

080039c8 <_fflush_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	690b      	ldr	r3, [r1, #16]
 80039cc:	4605      	mov	r5, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	b913      	cbnz	r3, 80039d8 <_fflush_r+0x10>
 80039d2:	2500      	movs	r5, #0
 80039d4:	4628      	mov	r0, r5
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	b118      	cbz	r0, 80039e2 <_fflush_r+0x1a>
 80039da:	6983      	ldr	r3, [r0, #24]
 80039dc:	b90b      	cbnz	r3, 80039e2 <_fflush_r+0x1a>
 80039de:	f7ff fa4f 	bl	8002e80 <__sinit>
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <_fflush_r+0x6c>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	d11b      	bne.n	8003a20 <_fflush_r+0x58>
 80039e8:	686c      	ldr	r4, [r5, #4]
 80039ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ef      	beq.n	80039d2 <_fflush_r+0xa>
 80039f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039f4:	07d0      	lsls	r0, r2, #31
 80039f6:	d404      	bmi.n	8003a02 <_fflush_r+0x3a>
 80039f8:	0599      	lsls	r1, r3, #22
 80039fa:	d402      	bmi.n	8003a02 <_fflush_r+0x3a>
 80039fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039fe:	f7ff fadd 	bl	8002fbc <__retarget_lock_acquire_recursive>
 8003a02:	4628      	mov	r0, r5
 8003a04:	4621      	mov	r1, r4
 8003a06:	f7ff ff59 	bl	80038bc <__sflush_r>
 8003a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a0c:	07da      	lsls	r2, r3, #31
 8003a0e:	4605      	mov	r5, r0
 8003a10:	d4e0      	bmi.n	80039d4 <_fflush_r+0xc>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	059b      	lsls	r3, r3, #22
 8003a16:	d4dd      	bmi.n	80039d4 <_fflush_r+0xc>
 8003a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a1a:	f7ff fad0 	bl	8002fbe <__retarget_lock_release_recursive>
 8003a1e:	e7d9      	b.n	80039d4 <_fflush_r+0xc>
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <_fflush_r+0x70>)
 8003a22:	429c      	cmp	r4, r3
 8003a24:	d101      	bne.n	8003a2a <_fflush_r+0x62>
 8003a26:	68ac      	ldr	r4, [r5, #8]
 8003a28:	e7df      	b.n	80039ea <_fflush_r+0x22>
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <_fflush_r+0x74>)
 8003a2c:	429c      	cmp	r4, r3
 8003a2e:	bf08      	it	eq
 8003a30:	68ec      	ldreq	r4, [r5, #12]
 8003a32:	e7da      	b.n	80039ea <_fflush_r+0x22>
 8003a34:	08003ce8 	.word	0x08003ce8
 8003a38:	08003d08 	.word	0x08003d08
 8003a3c:	08003cc8 	.word	0x08003cc8

08003a40 <_lseek_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4d07      	ldr	r5, [pc, #28]	; (8003a60 <_lseek_r+0x20>)
 8003a44:	4604      	mov	r4, r0
 8003a46:	4608      	mov	r0, r1
 8003a48:	4611      	mov	r1, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	602a      	str	r2, [r5, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7fd f804 	bl	8000a5c <_lseek>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_lseek_r+0x1e>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_lseek_r+0x1e>
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	20000138 	.word	0x20000138

08003a64 <__swhatbuf_r>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	460e      	mov	r6, r1
 8003a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	b096      	sub	sp, #88	; 0x58
 8003a70:	4614      	mov	r4, r2
 8003a72:	461d      	mov	r5, r3
 8003a74:	da07      	bge.n	8003a86 <__swhatbuf_r+0x22>
 8003a76:	2300      	movs	r3, #0
 8003a78:	602b      	str	r3, [r5, #0]
 8003a7a:	89b3      	ldrh	r3, [r6, #12]
 8003a7c:	061a      	lsls	r2, r3, #24
 8003a7e:	d410      	bmi.n	8003aa2 <__swhatbuf_r+0x3e>
 8003a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a84:	e00e      	b.n	8003aa4 <__swhatbuf_r+0x40>
 8003a86:	466a      	mov	r2, sp
 8003a88:	f000 f8be 	bl	8003c08 <_fstat_r>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	dbf2      	blt.n	8003a76 <__swhatbuf_r+0x12>
 8003a90:	9a01      	ldr	r2, [sp, #4]
 8003a92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a9a:	425a      	negs	r2, r3
 8003a9c:	415a      	adcs	r2, r3
 8003a9e:	602a      	str	r2, [r5, #0]
 8003aa0:	e7ee      	b.n	8003a80 <__swhatbuf_r+0x1c>
 8003aa2:	2340      	movs	r3, #64	; 0x40
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	b016      	add	sp, #88	; 0x58
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}

08003aac <__smakebuf_r>:
 8003aac:	898b      	ldrh	r3, [r1, #12]
 8003aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ab0:	079d      	lsls	r5, r3, #30
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	d507      	bpl.n	8003ac8 <__smakebuf_r+0x1c>
 8003ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	6123      	str	r3, [r4, #16]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	6163      	str	r3, [r4, #20]
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	ab01      	add	r3, sp, #4
 8003aca:	466a      	mov	r2, sp
 8003acc:	f7ff ffca 	bl	8003a64 <__swhatbuf_r>
 8003ad0:	9900      	ldr	r1, [sp, #0]
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f7ff fa73 	bl	8002fc0 <_malloc_r>
 8003ada:	b948      	cbnz	r0, 8003af0 <__smakebuf_r+0x44>
 8003adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae0:	059a      	lsls	r2, r3, #22
 8003ae2:	d4ef      	bmi.n	8003ac4 <__smakebuf_r+0x18>
 8003ae4:	f023 0303 	bic.w	r3, r3, #3
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	e7e3      	b.n	8003ab8 <__smakebuf_r+0xc>
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <__smakebuf_r+0x7c>)
 8003af2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	6020      	str	r0, [r4, #0]
 8003af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	9b00      	ldr	r3, [sp, #0]
 8003b00:	6163      	str	r3, [r4, #20]
 8003b02:	9b01      	ldr	r3, [sp, #4]
 8003b04:	6120      	str	r0, [r4, #16]
 8003b06:	b15b      	cbz	r3, 8003b20 <__smakebuf_r+0x74>
 8003b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f000 f88d 	bl	8003c2c <_isatty_r>
 8003b12:	b128      	cbz	r0, 8003b20 <__smakebuf_r+0x74>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	81a3      	strh	r3, [r4, #12]
 8003b20:	89a0      	ldrh	r0, [r4, #12]
 8003b22:	4305      	orrs	r5, r0
 8003b24:	81a5      	strh	r5, [r4, #12]
 8003b26:	e7cd      	b.n	8003ac4 <__smakebuf_r+0x18>
 8003b28:	08002e19 	.word	0x08002e19

08003b2c <__malloc_lock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_lock+0x8>)
 8003b2e:	f7ff ba45 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000130 	.word	0x20000130

08003b38 <__malloc_unlock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_unlock+0x8>)
 8003b3a:	f7ff ba40 	b.w	8002fbe <__retarget_lock_release_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000130 	.word	0x20000130

08003b44 <_free_r>:
 8003b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b46:	2900      	cmp	r1, #0
 8003b48:	d048      	beq.n	8003bdc <_free_r+0x98>
 8003b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b4e:	9001      	str	r0, [sp, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f1a1 0404 	sub.w	r4, r1, #4
 8003b56:	bfb8      	it	lt
 8003b58:	18e4      	addlt	r4, r4, r3
 8003b5a:	f7ff ffe7 	bl	8003b2c <__malloc_lock>
 8003b5e:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <_free_r+0x9c>)
 8003b60:	9801      	ldr	r0, [sp, #4]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	4615      	mov	r5, r2
 8003b66:	b933      	cbnz	r3, 8003b76 <_free_r+0x32>
 8003b68:	6063      	str	r3, [r4, #4]
 8003b6a:	6014      	str	r4, [r2, #0]
 8003b6c:	b003      	add	sp, #12
 8003b6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b72:	f7ff bfe1 	b.w	8003b38 <__malloc_unlock>
 8003b76:	42a3      	cmp	r3, r4
 8003b78:	d90b      	bls.n	8003b92 <_free_r+0x4e>
 8003b7a:	6821      	ldr	r1, [r4, #0]
 8003b7c:	1862      	adds	r2, r4, r1
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	bf04      	itt	eq
 8003b82:	681a      	ldreq	r2, [r3, #0]
 8003b84:	685b      	ldreq	r3, [r3, #4]
 8003b86:	6063      	str	r3, [r4, #4]
 8003b88:	bf04      	itt	eq
 8003b8a:	1852      	addeq	r2, r2, r1
 8003b8c:	6022      	streq	r2, [r4, #0]
 8003b8e:	602c      	str	r4, [r5, #0]
 8003b90:	e7ec      	b.n	8003b6c <_free_r+0x28>
 8003b92:	461a      	mov	r2, r3
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b10b      	cbz	r3, 8003b9c <_free_r+0x58>
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	d9fa      	bls.n	8003b92 <_free_r+0x4e>
 8003b9c:	6811      	ldr	r1, [r2, #0]
 8003b9e:	1855      	adds	r5, r2, r1
 8003ba0:	42a5      	cmp	r5, r4
 8003ba2:	d10b      	bne.n	8003bbc <_free_r+0x78>
 8003ba4:	6824      	ldr	r4, [r4, #0]
 8003ba6:	4421      	add	r1, r4
 8003ba8:	1854      	adds	r4, r2, r1
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	6011      	str	r1, [r2, #0]
 8003bae:	d1dd      	bne.n	8003b6c <_free_r+0x28>
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	6053      	str	r3, [r2, #4]
 8003bb6:	4421      	add	r1, r4
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	e7d7      	b.n	8003b6c <_free_r+0x28>
 8003bbc:	d902      	bls.n	8003bc4 <_free_r+0x80>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	6003      	str	r3, [r0, #0]
 8003bc2:	e7d3      	b.n	8003b6c <_free_r+0x28>
 8003bc4:	6825      	ldr	r5, [r4, #0]
 8003bc6:	1961      	adds	r1, r4, r5
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	bf04      	itt	eq
 8003bcc:	6819      	ldreq	r1, [r3, #0]
 8003bce:	685b      	ldreq	r3, [r3, #4]
 8003bd0:	6063      	str	r3, [r4, #4]
 8003bd2:	bf04      	itt	eq
 8003bd4:	1949      	addeq	r1, r1, r5
 8003bd6:	6021      	streq	r1, [r4, #0]
 8003bd8:	6054      	str	r4, [r2, #4]
 8003bda:	e7c7      	b.n	8003b6c <_free_r+0x28>
 8003bdc:	b003      	add	sp, #12
 8003bde:	bd30      	pop	{r4, r5, pc}
 8003be0:	20000090 	.word	0x20000090

08003be4 <_read_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d07      	ldr	r5, [pc, #28]	; (8003c04 <_read_r+0x20>)
 8003be8:	4604      	mov	r4, r0
 8003bea:	4608      	mov	r0, r1
 8003bec:	4611      	mov	r1, r2
 8003bee:	2200      	movs	r2, #0
 8003bf0:	602a      	str	r2, [r5, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7fc fed2 	bl	800099c <_read>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_read_r+0x1e>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_read_r+0x1e>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	20000138 	.word	0x20000138

08003c08 <_fstat_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4d07      	ldr	r5, [pc, #28]	; (8003c28 <_fstat_r+0x20>)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4604      	mov	r4, r0
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	f7fc ff06 	bl	8000a26 <_fstat>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	d102      	bne.n	8003c24 <_fstat_r+0x1c>
 8003c1e:	682b      	ldr	r3, [r5, #0]
 8003c20:	b103      	cbz	r3, 8003c24 <_fstat_r+0x1c>
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	bd38      	pop	{r3, r4, r5, pc}
 8003c26:	bf00      	nop
 8003c28:	20000138 	.word	0x20000138

08003c2c <_isatty_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d06      	ldr	r5, [pc, #24]	; (8003c48 <_isatty_r+0x1c>)
 8003c30:	2300      	movs	r3, #0
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	f7fc ff05 	bl	8000a46 <_isatty>
 8003c3c:	1c43      	adds	r3, r0, #1
 8003c3e:	d102      	bne.n	8003c46 <_isatty_r+0x1a>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b103      	cbz	r3, 8003c46 <_isatty_r+0x1a>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	20000138 	.word	0x20000138

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
